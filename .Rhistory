weather_id = DF_weather[
which(DF_checkin[i, "timestamps"]>=DF_weather$influ_ts &
DF_checkin[i, "timestamps"]<DF_weather$influ_te),
"id"]
DF_checkin[i,"weather_id"] = weather_id
}
DF_checkin_weather = merge(x=DF_checkin, y=DF_weather,
by.x="weather_id", by.y="id", all.X=TRUE)
rm(DF_checkin)
## deal with time
DF_checkin_weather$datetime = strptime( strtrim(DF_checkin_weather$localtime.x,19),
format="%Y-%m-%d %H:%M:%S")
DF_checkin_weather$hour = as.factor(format(DF_checkin_weather$datetime,"%H"))
DF_checkin_weather$yearday = as.factor(format(DF_checkin_weather$datetime,"%j"))
DF_checkin_weather$isweekend = as.factor(ifelse(
(format(DF_checkin_weather$datetime,"%w")>5 |
format(DF_checkin_weather$datetime,"%w")<1),
"Weekend", "Workday"))
# remove the unnecessary columns
DF_checkin_weather$weather_id = NULL
DF_checkin_weather$localtime.x = NULL
DF_checkin_weather$lat.y = NULL
DF_checkin_weather$lon.y = NULL
DF_checkin_weather$localtime.y = NULL
DF_checkin_weather$timestamps.y = NULL
DF_checkin_weather$influ_ts = NULL
DF_checkin_weather$influ_te = NULL
summary(DF_checkin_weather)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","factor",
"numeric","character","numeric","numeric",
"numeric")
)
summary(DF_weather)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric")
)
summary(DF_weather)
DF_checkin = read.csv( paste0(basedir, "data\\allcheckins.csv"),
header=TRUE, sep=",", nrows=20000,
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"character", "numeric","numeric",
"numeric","character","factor",
"factor")
)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric")
)
## the influence time of each weather record
obs_time = DF_weather$timestamps
nxt_obs_time = c(obs_time[-1],(tail(obs_time,1)+3600))
lst_obs_time = c((head(obs_time,1)-3600),obs_time[1:(length(obs_time)-1)])
DF_weather$influ_ts = (obs_time + lst_obs_time )/2
DF_weather$influ_te = (obs_time + nxt_obs_time )/2
rm(obs_time, nxt_obs_time, lst_obs_time)
## join checkin data with weather data based on timestamps
DF_checkin$weather_id=0
for(i in 1:nrow(DF_checkin)){
weather_id = DF_weather[
which(DF_checkin[i, "timestamps"]>=DF_weather$influ_ts &
DF_checkin[i, "timestamps"]<DF_weather$influ_te),
"id"]
DF_checkin[i,"weather_id"] = weather_id
}
DF_checkin_weather = merge(x=DF_checkin, y=DF_weather,
by.x="weather_id", by.y="id", all.X=TRUE)
rm(DF_checkin)
## deal with time
DF_checkin_weather$datetime = strptime( strtrim(DF_checkin_weather$localtime.x,19),
format="%Y-%m-%d %H:%M:%S")
DF_checkin_weather$hour = as.factor(format(DF_checkin_weather$datetime,"%H"))
DF_checkin_weather$yearday = as.factor(format(DF_checkin_weather$datetime,"%j"))
DF_checkin_weather$isweekend = as.factor(ifelse(
(format(DF_checkin_weather$datetime,"%w")>5 |
format(DF_checkin_weather$datetime,"%w")<1),
"Weekend", "Workday"))
# remove the unnecessary columns
DF_checkin_weather$weather_id = NULL
DF_checkin_weather$localtime.x = NULL
DF_checkin_weather$lat.y = NULL
DF_checkin_weather$lon.y = NULL
DF_checkin_weather$localtime.y = NULL
DF_checkin_weather$timestamps.y = NULL
DF_checkin_weather$influ_ts = NULL
DF_checkin_weather$influ_te = NULL
rm(i)
rm(i,weather_id)
summary(DF_checkin_weather)
DF_checkin_weather$weekday = as.factor(format(DF_checkin_weather$datetime,"%w"))
summary(DF_checkin_weather)
DF_checkin = read.csv( paste0(basedir, "data\\allcheckins.csv"),
header=TRUE, sep=",", nrows=100000,
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"character", "numeric","numeric",
"numeric","character","factor",
"factor")
)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric")
)
## the influence time of each weather record
obs_time = DF_weather$timestamps
nxt_obs_time = c(obs_time[-1],(tail(obs_time,1)+3600))
lst_obs_time = c((head(obs_time,1)-3600),obs_time[1:(length(obs_time)-1)])
DF_weather$influ_ts = (obs_time + lst_obs_time )/2
DF_weather$influ_te = (obs_time + nxt_obs_time )/2
rm(obs_time, nxt_obs_time, lst_obs_time)
## join checkin data with weather data based on timestamps
DF_checkin$weather_id=0
for(i in 1:nrow(DF_checkin)){
weather_id = DF_weather[
which(DF_checkin[i, "timestamps"]>=DF_weather$influ_ts &
DF_checkin[i, "timestamps"]<DF_weather$influ_te),
"id"]
DF_checkin[i,"weather_id"] = weather_id
}
rm(i,weather_id)
DF_checkin_weather = merge(x=DF_checkin, y=DF_weather,
by.x="weather_id", by.y="id", all.X=TRUE)
rm(DF_checkin)
## deal with time
DF_checkin_weather$datetime = strptime( strtrim(DF_checkin_weather$localtime.x,19),
format="%Y-%m-%d %H:%M:%S")
DF_checkin_weather$hour = as.factor(format(DF_checkin_weather$datetime,"%H"))
DF_checkin_weather$yearday = as.factor(format(DF_checkin_weather$datetime,"%j"))
DF_checkin_weather$weekday = as.factor(format(DF_checkin_weather$datetime,"%w"))
DF_checkin_weather$isweekend = as.factor(ifelse(
(format(DF_checkin_weather$datetime,"%w")>5 |
format(DF_checkin_weather$datetime,"%w")<1),
"Weekend", "Workday"))
# remove the unnecessary columns
DF_checkin_weather$weather_id = NULL
DF_checkin_weather$localtime.x = NULL
DF_checkin_weather$lat.y = NULL
DF_checkin_weather$lon.y = NULL
DF_checkin_weather$localtime.y = NULL
DF_checkin_weather$timestamps.y = NULL
DF_checkin_weather$influ_ts = NULL
DF_checkin_weather$influ_te = NULL
summary(DF_checkin_weather)
tmodel<-multinom(cate_l1~conds+hour+isweekend,
data=DF_checkin_weather,maxit = 500)
tsummary = summary(tmodel)
# The multinom package does not include p-value calculation for the regression
# coefficients, so we calculate p-values using Wald tests (here z-tests).
z = tsummary$coefficients/tsummary$standard.errors
# 2-tailed z test
p = (1 - pnorm(abs(z), 0, 1)) * 2
View(DF_weather)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","logical","logical","logical",
"logical","logical")
)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
View(DF_weather)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","logical","logical","logical",
"logical","logical")
)
View(DF_weather)
DF_weather$fog2=intToBits(DF_weather$fog)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric",logical(0),logical(0),logical(0),
logical(0),logical(0))
)
View(DF_weather)
str(DF_weather)
summary(DF_weather)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
summary(DF_weather)
p
tsummary
coff = tsummary$coefficient
coff
plot(coff)
df_coff=data.frame.matrix(coff)
df_coff=as.data.frame.matrix(coff)
View(df_coff)
plot(df_coff)
df_coff=as.data.frame.matrix(t(coff)
)
View(df_coff)
df_coff=as.data.frame.matrix(coff)
View(df_coff)
DF_weather$fog=as.logical(DF_weather$fog)
DF_weather$rain=as.logical(DF_weather$rain)
DF_weather$snow=as.logical(DF_weather$snow)
DF_weather$thunder=as.logical(DF_weather$thunder)
DF_weather$tornado=as.logical(DF_weather$tornado)
View(DF_weather)
DF_checkin = read.csv( paste0(basedir, "data\\allcheckins.csv"),
header=TRUE, sep=",", nrows=100000,
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"character", "numeric","numeric",
"numeric","character","factor",
"factor")
)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
DF_weather$fog=as.logical(DF_weather$fog)
DF_weather$rain=as.logical(DF_weather$rain)
DF_weather$snow=as.logical(DF_weather$snow)
DF_weather$thunder=as.logical(DF_weather$thunder)
DF_weather$tornado=as.logical(DF_weather$tornado)
## the influence time of each weather record
obs_time = DF_weather$timestamps
nxt_obs_time = c(obs_time[-1],(tail(obs_time,1)+3600))
lst_obs_time = c((head(obs_time,1)-3600),obs_time[1:(length(obs_time)-1)])
DF_weather$influ_ts = (obs_time + lst_obs_time )/2
DF_weather$influ_te = (obs_time + nxt_obs_time )/2
rm(obs_time, nxt_obs_time, lst_obs_time)
DF_checkin$weather_id=0
for(i in 1:nrow(DF_checkin)){
weather_id = DF_weather[
which(DF_checkin[i, "timestamps"]>=DF_weather$influ_ts &
DF_checkin[i, "timestamps"]<DF_weather$influ_te),
"id"]
DF_checkin[i,"weather_id"] = weather_id
}
rm(i,weather_id)
DF_checkin_weather = merge(x=DF_checkin, y=DF_weather,
by.x="weather_id", by.y="id", all.X=TRUE)
rm(DF_checkin)
DF_checkin_weather$datetime = strptime( strtrim(DF_checkin_weather$localtime.x,19),
format="%Y-%m-%d %H:%M:%S")
DF_checkin_weather$hour = as.factor(format(DF_checkin_weather$datetime,"%H"))
DF_checkin_weather$yearday = format(DF_checkin_weather$datetime,"%j")
DF_checkin_weather$weekday = as.factor(format(DF_checkin_weather$datetime,"%w"))
DF_checkin_weather$isweekend = as.factor(ifelse(
(format(DF_checkin_weather$datetime,"%w")>5 |
format(DF_checkin_weather$datetime,"%w")<1),
"Weekend", "Workday"))
View(DF_checkin_weather)
DF_checkin_weather$weather_id = NULL
DF_checkin_weather$localtime.x = NULL
DF_checkin_weather$lat.y = NULL
DF_checkin_weather$lon.y = NULL
DF_checkin_weather$localtime.y = NULL
DF_checkin_weather$timestamps.y = NULL
DF_checkin_weather$influ_ts = NULL
DF_checkin_weather$influ_te = NULL
View(DF_checkin_weather)
tmodel<-multinom(cate_l1~hour+isweekend+fog+snow+rain,
data=DF_checkin_weather,maxit = 500)
tsummary = summary(tmodel)
coff2=tsummary$coefficient
df_coff2=data.frame.matrix(coff2)
df_coff2=as.data.frame.matrix(coff2)
View(df_coff2)
z2 = tsummary$coefficients/tsummary$standard.errors
# 2-tailed z test
p2 = (1 - pnorm(abs(z2), 0, 1)) * 2
View(`p2`)
expcoef = exp(coef(tmodel))
View(expcoef)
pp = fitted(tmodel)
head(pp)
DF_checkin = read.csv( paste0(basedir, "data\\userA.csv"),
header=TRUE, sep=",", #nrows=100000,
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"character", "numeric","numeric",
"numeric","character","factor",
"factor")
)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
DF_weather$fog=as.logical(DF_weather$fog)
DF_weather$rain=as.logical(DF_weather$rain)
DF_weather$snow=as.logical(DF_weather$snow)
DF_weather$thunder=as.logical(DF_weather$thunder)
DF_weather$tornado=as.logical(DF_weather$tornado)
## the influence time of each weather record
obs_time = DF_weather$timestamps
nxt_obs_time = c(obs_time[-1],(tail(obs_time,1)+3600))
lst_obs_time = c((head(obs_time,1)-3600),obs_time[1:(length(obs_time)-1)])
DF_weather$influ_ts = (obs_time + lst_obs_time )/2
DF_weather$influ_te = (obs_time + nxt_obs_time )/2
rm(obs_time, nxt_obs_time, lst_obs_time)
## join checkin data with weather data based on timestamps
DF_checkin$weather_id=0
for(i in 1:nrow(DF_checkin)){
weather_id = DF_weather[
which(DF_checkin[i, "timestamps"]>=DF_weather$influ_ts &
DF_checkin[i, "timestamps"]<DF_weather$influ_te),
"id"]
DF_checkin[i,"weather_id"] = weather_id
}
rm(i,weather_id)
DF_checkin_weather = merge(x=DF_checkin, y=DF_weather,
by.x="weather_id", by.y="id", all.X=TRUE)
rm(DF_checkin)
## deal with time
DF_checkin_weather$datetime = strptime( strtrim(DF_checkin_weather$localtime.x,19),
format="%Y-%m-%d %H:%M:%S")
DF_checkin_weather$hour = as.factor(format(DF_checkin_weather$datetime,"%H"))
DF_checkin_weather$yearday = format(DF_checkin_weather$datetime,"%j")
DF_checkin_weather$weekday = as.factor(format(DF_checkin_weather$datetime,"%w"))
DF_checkin_weather$isweekend = as.factor(ifelse(
(format(DF_checkin_weather$datetime,"%w")>5 |
format(DF_checkin_weather$datetime,"%w")<1),
"Weekend", "Workday"))
# remove the unnecessary columns
DF_checkin_weather$weather_id = NULL
DF_checkin_weather$localtime.x = NULL
DF_checkin_weather$lat.y = NULL
DF_checkin_weather$lon.y = NULL
DF_checkin_weather$localtime.y = NULL
DF_checkin_weather$timestamps.y = NULL
DF_checkin_weather$influ_ts = NULL
DF_checkin_weather$influ_te = NULL
tmodel<-multinom(cate_l1~hour+isweekend+fog+snow+rain,
data=DF_checkin_weather,maxit = 500)
tsummary = summary(tmodel)
# The multinom package does not include p-value calculation for the regression
# coefficients, so we calculate p-values using Wald tests (here z-tests).
z = tsummary$coefficients/tsummary$standard.errors
# 2-tailed z test
p = (1 - pnorm(abs(z), 0, 1)) * 2
expcoef = exp(coef(tmodel))
pp = fitted(tmodel)
head(pp)
View(DF_checkin_weather)
predict(tmodel)
head(predict(tmodel))
head(predict(tmodel),20)
predictMNL <- function(model, newdata) {
# Only works for neural network models
if (is.element("nnet",class(model))) {
# Calculate the individual and cumulative probabilities
probs <- predict(model,newdata,"probs")
cum.probs <- t(apply(probs,1,cumsum))
# Draw random values
vals <- runif(nrow(newdata))
# Join cumulative probabilities and random draws
tmp <- cbind(cum.probs,vals)
# For each row, get choice index.
k <- ncol(probs)
ids <- 1 + apply(tmp,1,function(x) length(which(x[1:k] < x[k+1])))
# Return the values
return(ids)
}
}
newdata=DF_checkin_weather
newdata["cate_l1"]=NULL
View(newdata)
y2 <- predictMNL(mod,df)
y2 <- predictMNL(tmodel,df)
y2 <- predictMNL(tmodel,newdata)
comp = data.frame(DF_checkin_weather$cate_l1, y2)
View(comp)
DF_checkin_weather$cate_l1
?level
??level
levels(DF_checkin_weather$cate_l1)
comp = data.frame(DF_checkin_weather$cate_l1, levels(DF_checkin_weather$cate_l1)[y2])
View(comp)
comp$correct= ifelse(comp[1]==comp[2],1,0)
View(comp)
sum(comp$correct)
sum(comp$correct)/nrow(comp)
tmodel<-multinom(cate_l2~hour+isweekend+fog+snow+rain,
data=DF_checkin_weather,maxit = 500)
tsummary = summary(tmodel)
DF_checkin = read.csv( paste0(basedir, "data\\userA.csv"),
header=TRUE, sep=",", #nrows=100000,
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"character", "numeric","numeric",
"numeric","character","factor",
"factor")
)
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
DF_weather$fog=as.logical(DF_weather$fog)
DF_weather$rain=as.logical(DF_weather$rain)
DF_weather$snow=as.logical(DF_weather$snow)
DF_weather$thunder=as.logical(DF_weather$thunder)
DF_weather$tornado=as.logical(DF_weather$tornado)
## the influence time of each weather record
obs_time = DF_weather$timestamps
nxt_obs_time = c(obs_time[-1],(tail(obs_time,1)+3600))
lst_obs_time = c((head(obs_time,1)-3600),obs_time[1:(length(obs_time)-1)])
DF_weather$influ_ts = (obs_time + lst_obs_time )/2
DF_weather$influ_te = (obs_time + nxt_obs_time )/2
rm(obs_time, nxt_obs_time, lst_obs_time)
## join checkin data with weather data based on timestamps
DF_checkin$weather_id=0
for(i in 1:nrow(DF_checkin)){
weather_id = DF_weather[
which(DF_checkin[i, "timestamps"]>=DF_weather$influ_ts &
DF_checkin[i, "timestamps"]<DF_weather$influ_te),
"id"]
DF_checkin[i,"weather_id"] = weather_id
}
rm(i,weather_id)
DF_checkin_weather = merge(x=DF_checkin, y=DF_weather,
by.x="weather_id", by.y="id", all.X=TRUE)
rm(DF_checkin)
## deal with time
DF_checkin_weather$datetime = strptime( strtrim(DF_checkin_weather$localtime.x,19),
format="%Y-%m-%d %H:%M:%S")
DF_checkin_weather$hour = as.factor(format(DF_checkin_weather$datetime,"%H"))
DF_checkin_weather$yearday = format(DF_checkin_weather$datetime,"%j")
DF_checkin_weather$weekday = as.factor(format(DF_checkin_weather$datetime,"%w"))
DF_checkin_weather$isweekend = as.factor(ifelse(
(format(DF_checkin_weather$datetime,"%w")>5 |
format(DF_checkin_weather$datetime,"%w")<1),
"Weekend", "Workday"))
# remove the unnecessary columns
DF_checkin_weather$weather_id = NULL
DF_checkin_weather$localtime.x = NULL
DF_checkin_weather$lat.y = NULL
DF_checkin_weather$lon.y = NULL
DF_checkin_weather$localtime.y = NULL
DF_checkin_weather$timestamps.y = NULL
DF_checkin_weather$influ_ts = NULL
DF_checkin_weather$influ_te = NULL
tmodel<-multinom(cate_l2~hour+isweekend+fog+snow+rain,
data=DF_checkin_weather,maxit = 500)
tsummary = summary(tmodel)
tmodel<-multinom(cate_l1~hour+isweekend+fog+snow+rain,
data=DF_checkin_weather,maxit = 500)
View(DF_checkin_weather)
tmodel<-multinom(cate_l2~hour+isweekend+fog+snow+rain,
data=DF_checkin_weather,maxit = 500)
y2 <- predictMNL(tmodel,newdata)
y3 <- predictMNL(tmodel,newdata)
comp = data.frame(DF_checkin_weather$cate_l1,
levels(DF_checkin_weather$cate_l1)[y2]
levels(DF_checkin_weather$cate_l1)[y3])
comp$correct= ifelse(comp[1]==comp[2]|comp[1]==comp[3],1,0)
comp = data.frame(DF_checkin_weather$cate_l1,
levels(DF_checkin_weather$cate_l1)[y2],
levels(DF_checkin_weather$cate_l1)[y3])
comp$correct= ifelse(comp[1]==comp[2]|comp[1]==comp[3],1,0)
View(comp)
comp$correct= ifelse(comp[1]==comp[2]||comp[1]==comp[3],1,0)
str(comp)
levels(DF_checkin_weather$cate_l1)
comp = data.frame(DF_checkin_weather$cate_l1,
levels(DF_checkin_weather$cate_l1)[y2])
comp = data.frame(DF_checkin_weather$cate_l1,
levels(DF_checkin_weather$cate_l1)[y2],
levels(DF_checkin_weather$cate_l1)[y3])
comp$correct= ifelse(comp[1]==comp[2],1,0)
comp = data.frame(DF_checkin_weather$cate_l1, levels(DF_checkin_weather$cate_l1)[y2])
comp$correct= ifelse(comp[1]==comp[2],1,0)
comp$correct= ifelse(comp[1]==comp[2],1,0)
comp$correct= ifelse(comp[1]==comp[2],1,0)
y2 <- predictMNL(tmodel,newdata)
y3 <- predictMNL(tmodel,newdata)
comp = data.frame(DF_checkin_weather$cate_l1,
levels(DF_checkin_weather$cate_l1)[y2],
levels(DF_checkin_weather$cate_l1)[y3])
comp$correct= ifelse(comp[1]==comp[2],1,0)
comp$correctu= ifelse(comp[1]==comp[2]|comp[1]==comp[3],1,0)
sum(comp$correct)
sum(comp$correctu)
sum(comp$correctu)/nrow(comp)
tmodel<-multinom(cate_l2~hour+isweekend+fog+snow+rain,
data=DF_checkin_weather,maxit = 500)
multinom
