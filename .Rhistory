accurates[order(accurates[,6]),]
aaccurates= accurates[order(accurates[,6]),]  #order
aaccurates$seq= c(1:10)
accurates= accurates[order(accurates[,6]),]  #order
View(accurates)
accurates$seq= vector(1:10)
accurates$seq= numeric(1:10)
numeric(1:10)
c(1:10)
accurates$seq= c(1:10)
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
accurates= accurates[order(accurates[,6]),]  #order
accurates$seq= 1:10
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
accurates= accurates[order(accurates[,6]),]  #order
View(accurates)
accurates=as.data.frame(accurates)
accurates$seq= 1:10
View(accurates)
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
accurates= as.data.frame(accurates[order(t(accurates)[,6]),] ) #order
View(accurates)
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
View(accurates)
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates= as.data.frame(accurates[order(t(accurates)[,6]),] ) #order
View(accurates)
accurates= as.data.frame(accurates[,order(accurates)[6,])] ) #order
View(accurates)
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
accurates= accurates[order(accurates[,6]),]  #order
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates= accurates[order(t(accurates)[,6]),]  #order
accurates=t(accurates)
accurates= as.data.frame(accurates[order(accurates[,6]),])  #order
View(accurates)
accurates$seq= 1:10
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
accurates= as.data.frame(accurates[order(accurates[,6]),])  #order
accurates[,6]= NULL
accurates[,1]= NULL
View(accurates)
# show accuracy
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
accurates= as.data.frame(accurates[order(accurates[,6]),])  #order
str(accurates)
accurates$V6=NULL
str(accurates)
accurates$seq= 1:10
str(accurates)
colnames(accurates)[1:5]=c("combind","temporal","weather","sequence","spatial")
str(accurates)
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
accurates= as.data.frame(accurates[order(accurates[,6]),])  #order
accurates$V6=NULL
accurates$user= 1:10
colnames(accurates)[1:5]=c("combind","temporal","weather","sequence","spatial")
str(accurates)
ggplot(data=accurates, aes(x=user)) +
#geom_point
geom_line(aes(y=combind)) +
geom_line(aes(y=temporal)) +
geom_line(aes(y=weather)) +
geom_line(aes(y=sequence)) +
geom_line(aes(y=spatial))
ggplot(data=accurates, aes(x=user)) +
#geom_point
geom_line(aes(y=combind, color="green")) +
geom_line(aes(y=temporal, color="orange")) +
geom_line(aes(y=weather, color="red")) +
geom_line(aes(y=sequence, color="yellow")) +
geom_line(aes(y=spatial, color="blue"))
ggplot(data=accurates, aes(x=user, color=y)) +
#geom_point
geom_line(aes(y=combind)) +
geom_line(aes(y=temporal)) +
geom_line(aes(y=weather)) +
geom_line(aes(y=sequence)) +
geom_line(aes(y=spatial))
ggplot(data=accurates, aes(x=user, color=y)) +
#geom_point
geom_point(aes(y=combind)) +
geom_point(aes(y=temporal)) +
geom_point(aes(y=weather)) +
geom_point(aes(y=sequence)) +
geom_point(aes(y=spatial))
ggplot(data=accurates, aes(x=user)) +
#geom_point
geom_point(aes(y=combind)) +
geom_point(aes(y=temporal)) +
geom_point(aes(y=weather)) +
geom_point(aes(y=sequence)) +
geom_point(aes(y=spatial))
plot(accurates$user,accurates$combind,type="l")
lines(accurates$user,accurates$temporal)
lines(accurates$user,accurates$weather)
lines(accurates$user,accurates$sequence)
lines(accurates$user,accurates$spatial)
plot(accurates$user,accurates$combind,type="l", color="green")
lines(accurates$user,accurates$temporal)
lines(accurates$user,accurates$weather)
lines(accurates$user,accurates$sequence)
lines(accurates$user,accurates$spatial)
?plot
plot(accurates$user,accurates$combind,type="l", col="green")
?plot
plot(accurates$user,accurates$combind,type="l", col="green")
lines(accurates$user,accurates$temporal,col="red")
lines(accurates$user,accurates$weather,col="orange")
lines(accurates$user,accurates$sequence,col="blue")
lines(accurates$user,accurates$spatial,col="yellow")
View(accurates)
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
accurates= as.data.frame(accurates[order(accurates[,6]),])  #order
accurates$V6=NULL
View(accurates)
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
accurates= as.data.frame(accurates[order(accurates[,6]),])  #order
#accurates$V6=NULL
accurates$user= 1:10
colnames(accurates)[1:5]=c("combind","temporal","weather","sequence","spatial")
View(accurates)
accurates=accurates[complete.cases(accurates),]
View(accurates)
source("fun\\mathmatrixcal.R")
source("fun\\regression_single_user.R")
## data directory (external directory for input and output)
basedir = "D:\\Experiments\\R\\"
################################################################################
# load checkin data and weather data
# join weather data with checkin data
################################################################################
## load data
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
DF_weather$fog=as.logical(DF_weather$fog)
DF_weather$rain=as.logical(DF_weather$rain)
DF_weather$snow=as.logical(DF_weather$snow)
DF_weather$thunder=as.logical(DF_weather$thunder)
DF_weather$tornado=as.logical(DF_weather$tornado)
# DF_userset = read.csv( paste0(basedir, "data\\30users.csv"),
#                      header=TRUE, sep=",", nrows=100000,
#                      na.strings = "none",
#                      colClasses = c("numeric","numeric","factor",
#                                     "factor", "numeric","numeric",
#                                     "numeric","character","factor",
#                                     "factor")
# )
DF_userset = read.csv( paste0(basedir, "data\\random20user.csv"),
header=TRUE, sep=",", nrows=100000,
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"factor", "numeric","numeric",
"numeric","character","factor",
"factor")
)
# DF_checkin = read.csv( paste0(basedir, "data\\userA.csv"),
#                        header=TRUE, sep=",", #nrows=100000,
#                        na.strings = "none",
#                        colClasses = c("numeric","numeric","factor",
#                                       "factor", "numeric","numeric",
#                                       "numeric","character","factor",
#                                       "factor")
#                        )
list_df = split(DF_userset,DF_userset$user_id)
cate_l1_levels = levels(DF_userset$cate_l1)
i=0
result = lapply(list_df,function(DF_checkin){
i<<- i+1
print(paste0("*************",i,"*************"))
testforsingleuser(DF_checkin)
})
accurates=sapply(result, function(i){
c(i$corr,i$records)
})
accurates=t(accurates)
accurates= as.data.frame(accurates[order(accurates[,6]),])  #order
View(accurates)
accurates_comp=accurates[complete.cases(accurates),]
View(accurates_comp)
colnames(accurates)[1:5]=c("combind","temporal","weather","sequence","spatial")
accurates_complete=accurates[complete.cases(accurates),]
rm(accurates_comp)
View(accurates_complete)
result$12731916
result["12731916"]
sample = result["12731916"]
samplep=sample$p
samplep=sample[["p"]]
sample = result[["12731916"][]
sample = result[["12731916"]]
samplep=sample[["p"]]
samplep1=samplep[[1]]
samplep2=samplep[[1]]
samplep2=samplep[[2]]
View(samplep1)
View(samplep2)
samplep3=samplep[[3]]
samplep4=samplep[[4]]
samplep5=samplep[[5]]
View(samplep2)
sample22=t(samplep2)
samplep2=t(samplep2)
rm(sample22)
View(samplep2)
samplep3=t(samplep3)
samplep4=t(samplep4)
samplep5=t(samplep5)
View(samplep3)
View(samplep4)
View(samplep5)
rm(samplep)
samplez=sample[["z"]]
samplez=sample$z
samplesumm=sample[["summary"]]
rm(samplez)
tsummary1 = samplesumm[[1]]
z1 = tsummary1$coefficients/tsummary1$standard.errors
p1 = (1 - pnorm(abs(z1), 0, 1)) * 2
tsummary2 = samplesumm[[2]]
z2 = tsummary2$coefficients/tsummary2$standard.errors
p2 = (1 - pnorm(abs(z2), 0, 1)) * 2
tsummary3 = samplesumm[[3]]
z3 = tsummary3$coefficients/tsummary3$standard.errors
p3 = (1 - pnorm(abs(z3), 0, 1)) * 2
tsummary4 = samplesumm[[4]]
z4 = tsummary4$coefficients/tsummary4$standard.errors
p4 = (1 - pnorm(abs(z4), 0, 1)) * 2
tsummary5 = samplesumm[[5]]
z5 = tsummary5$coefficients/tsummary5$standard.errors
p5 = (1 - pnorm(abs(z5), 0, 1)) * 2
p1=t(p1)
p2=t(p2)
p3=t(p3)
p4=t(p4)
p5=t(p5)
View(`p1`)
View(`p2`)
View(`p3`)
View(`p4`)
View(`z5`)
View(`p5`)
samplemodel=sample[["model"]]
predicts=predict(samplemodel)
samplemodel=sample[["model"]][[1]]
predicts=predict(samplemodel)
names(list_df)
names(list_df[[13]])
names(list_df[13])
DF_checkin=list_df[[13]]
DF_checkin$datetime = strptime( strtrim(DF_checkin$localtime,19),
format="%Y-%m-%d %H:%M:%S")
## join checkin data with weather data based on timestamps
DF_checkin_weather = joindfsbytime(DF_checkin, DF_weather)
#rm(DF_checkin, DF_weather)
## deal with time
DF_checkin_weather$hour = as.factor(format(DF_checkin_weather$datetime,"%H"))
DF_checkin_weather$yearday = format(DF_checkin_weather$datetime,"%j")
DF_checkin_weather$weekday = format(DF_checkin_weather$datetime,"%w")
DF_checkin_weather$isweekend = as.factor(ifelse(
( DF_checkin_weather$weekday>5 | DF_checkin_weather$weekday<1),
"Weekend", "Workday"))
## add record for last checkin
DF_checkin_weather = copylastcheckinrec(DF_checkin_weather)
## temporally weighted sequences
#list_cate = split(DF_checkin_weather,DF_checkin_weather$last_cate_l1)
list_cate = split(DF_checkin_weather,DF_checkin_weather$last_cate_l1)
temp = lapply(seq_along(list_cate), function(i){
name = names(list_cate[i])
df = list_cate[[i]]
expsum = sum(exp(-2*df$time_diff/60))
ls = split(df, df$cate_l1)
lapply(seq_along(ls), function(j){
innername = names(ls[j])
innerdf = ls[[j]]
if(nrow(innerdf)>0){
innerexpsum = sum(exp(-2*innerdf$time_diff/60))
DF_checkin_weather[which(DF_checkin_weather$last_cate_l1==name),
paste0("t.",innername)] <<- innerexpsum/expsum
}else{
DF_checkin_weather[which(DF_checkin_weather$last_cate_l1==name),
paste0("t.",innername)] <<- 0
}
})
})
## geographically weighted
df_venue = unique(data.frame(id=DF_checkin_weather$venue_id,
lat=DF_checkin_weather$lat.x,
lon=DF_checkin_weather$lon.x,
cate_l1=DF_checkin_weather$cate_l1))
df_distsqr=getdistmatrix(df_venue)
dims = nrow(df_venue)
for(i in 1:dims){
venue_id = df_venue[i,"id"]
expsum = sum(exp(-df_distsqr[i,]))
for(j in 2:10){ # the first level is the baseline
venue_with_cate_j = which(df_venue$cate_l1==cate_l1_levels[j])
if(length(venue_with_cate_j)>0){
subexpsum = sum(exp(-df_distsqr[i,venue_with_cate_j]))
DF_checkin_weather[which(DF_checkin_weather$venue_id==venue_id),
paste0("s.",j)] = subexpsum/expsum
}else {
DF_checkin_weather[which(DF_checkin_weather$venue_id==venue_id),
paste0("s.",j)] = 0
}
}
}
colnames(DF_checkin_weather)[26:44] <- c("t0", "t1", "t2", "t3", "t4", "t5",
"t6", "t7", "t8", "t9","s1",
"s2", "s3", "s4", "s5", "s6", "s7",
"s8", "s9")
#
# ################################################################################
# # analysis with DF_checkin_weather
# ################################################################################
#
# ################################################################################
# # multinominal logistic regression model
# tmodel<-multinom(cate_l1~hour+isweekend+fog+snow+rain,
#                  data=DF_checkin_weather,maxit = 500)
# tsummary = summary(tmodel)
# # The multinom package does not include p-value calculation for the regression
# # coefficients, so we calculate p-values using Wald tests (here z-tests).
# z = tsummary$coefficients/tsummary$standard.errors
# # 2-tailed z test
# p = (1 - pnorm(abs(z), 0, 1)) * 2
# expcoef = exp(coef(tmodel))
# pp = fitted(tmodel)
################################################################################
# multinomial logistic regression model - 2
newdata = DF_checkin_weather
newdata[,"cate_l1"]=NULL
tmodel1<-multinom(cate_l1~ hour+isweekend+fog+snow+rain+t1+t2+t3+t4+t5+t6+t7+t8+t9+s1+s2+s3+s4+s5+s6+s7+s8+s9,
data=DF_checkin_weather,maxit = 1000)
tsummary1 = summary(tmodel1)
z1 = tsummary1$coefficients/tsummary1$standard.errors
p1 = (1 - pnorm(abs(z1), 0, 1)) * 2
y1=predict(tmodel1,newdata)
tmodel2<-multinom(cate_l1~ hour+isweekend,
data=DF_checkin_weather,maxit = 1000)
tsummary2 = summary(tmodel2)
z2 = tsummary2$coefficients/tsummary2$standard.errors
p2 = (1 - pnorm(abs(z2), 0, 1)) * 2
y2=predict(tmodel2,newdata)
tmodel3<-multinom(cate_l1~ fog+snow+rain,
data=DF_checkin_weather,maxit = 1000)
tsummary3 = summary(tmodel3)
z3 = tsummary3$coefficients/tsummary3$standard.errors
p3 = (1 - pnorm(abs(z3), 0, 1)) * 2
y3=predict(tmodel3,newdata)
tmodel4<-multinom(cate_l1~ t1+t2+t3+t4+t5+t6+t7+t8+t9,
data=DF_checkin_weather,maxit = 1000)
tsummary4 = summary(tmodel4)
z4 = tsummary4$coefficients/tsummary4$standard.errors
p4 = (1 - pnorm(abs(z4), 0, 1)) * 2
y4=predict(tmodel4,newdata)
tmodel5<-multinom(cate_l1~ s1+s2+s3+s4+s5+s6+s7+s8+s9,
data=DF_checkin_weather,maxit = 1000)
tsummary5 = summary(tmodel5)
z5 = tsummary5$coefficients/tsummary5$standard.errors
p5 = (1 - pnorm(abs(z5), 0, 1)) * 2
y5=predict(tmodel5,newdata)
comp = data.frame(DF_checkin_weather$cate_l1,
y1,y2,y3,y4,y5)
comp <- data.frame(lapply(comp, as.character), stringsAsFactors=FALSE)
comp$corr1=ifelse(comp[1]==comp[2],1,0)
comp$corr2=ifelse(comp[1]==comp[3],1,0)
comp$corr3=ifelse(comp[1]==comp[4],1,0)
comp$corr4=ifelse(comp[1]==comp[5],1,0)
comp$corr5=ifelse(comp[1]==comp[6],1,0)
View(comp)
DF_checkin=list_df[[3]]
DF_checkin$datetime = strptime( strtrim(DF_checkin$localtime,19),
format="%Y-%m-%d %H:%M:%S")
## join checkin data with weather data based on timestamps
DF_checkin_weather = joindfsbytime(DF_checkin, DF_weather)
#rm(DF_checkin, DF_weather)
## deal with time
DF_checkin_weather$hour = as.factor(format(DF_checkin_weather$datetime,"%H"))
DF_checkin_weather$yearday = format(DF_checkin_weather$datetime,"%j")
DF_checkin_weather$weekday = format(DF_checkin_weather$datetime,"%w")
DF_checkin_weather$isweekend = as.factor(ifelse(
( DF_checkin_weather$weekday>5 | DF_checkin_weather$weekday<1),
"Weekend", "Workday"))
## add record for last checkin
DF_checkin_weather = copylastcheckinrec(DF_checkin_weather)
## temporally weighted sequences
#list_cate = split(DF_checkin_weather,DF_checkin_weather$last_cate_l1)
list_cate = split(DF_checkin_weather,DF_checkin_weather$last_cate_l1)
temp = lapply(seq_along(list_cate), function(i){
name = names(list_cate[i])
df = list_cate[[i]]
expsum = sum(exp(-2*df$time_diff/60))
ls = split(df, df$cate_l1)
lapply(seq_along(ls), function(j){
innername = names(ls[j])
innerdf = ls[[j]]
if(nrow(innerdf)>0){
innerexpsum = sum(exp(-2*innerdf$time_diff/60))
DF_checkin_weather[which(DF_checkin_weather$last_cate_l1==name),
paste0("t.",innername)] <<- innerexpsum/expsum
}else{
DF_checkin_weather[which(DF_checkin_weather$last_cate_l1==name),
paste0("t.",innername)] <<- 0
}
})
})
## geographically weighted
df_venue = unique(data.frame(id=DF_checkin_weather$venue_id,
lat=DF_checkin_weather$lat.x,
lon=DF_checkin_weather$lon.x,
cate_l1=DF_checkin_weather$cate_l1))
df_distsqr=getdistmatrix(df_venue)
dims = nrow(df_venue)
for(i in 1:dims){
venue_id = df_venue[i,"id"]
expsum = sum(exp(-df_distsqr[i,]))
for(j in 2:10){ # the first level is the baseline
venue_with_cate_j = which(df_venue$cate_l1==cate_l1_levels[j])
if(length(venue_with_cate_j)>0){
subexpsum = sum(exp(-df_distsqr[i,venue_with_cate_j]))
DF_checkin_weather[which(DF_checkin_weather$venue_id==venue_id),
paste0("s.",j)] = subexpsum/expsum
}else {
DF_checkin_weather[which(DF_checkin_weather$venue_id==venue_id),
paste0("s.",j)] = 0
}
}
}
colnames(DF_checkin_weather)[26:44] <- c("t0", "t1", "t2", "t3", "t4", "t5",
"t6", "t7", "t8", "t9","s1",
"s2", "s3", "s4", "s5", "s6", "s7",
"s8", "s9")
#
# ################################################################################
# # analysis with DF_checkin_weather
# ################################################################################
#
# ################################################################################
# # multinominal logistic regression model
# tmodel<-multinom(cate_l1~hour+isweekend+fog+snow+rain,
#                  data=DF_checkin_weather,maxit = 500)
# tsummary = summary(tmodel)
# # The multinom package does not include p-value calculation for the regression
# # coefficients, so we calculate p-values using Wald tests (here z-tests).
# z = tsummary$coefficients/tsummary$standard.errors
# # 2-tailed z test
# p = (1 - pnorm(abs(z), 0, 1)) * 2
# expcoef = exp(coef(tmodel))
# pp = fitted(tmodel)
################################################################################
# multinomial logistic regression model - 2
newdata = DF_checkin_weather
newdata[,"cate_l1"]=NULL
tmodel1<-multinom(cate_l1~ hour+isweekend+fog+snow+rain+t1+t2+t3+t4+t5+t6+t7+t8+t9+s1+s2+s3+s4+s5+s6+s7+s8+s9,
data=DF_checkin_weather,maxit = 1000)
tsummary1 = summary(tmodel1)
y1=predict(tmodel1,newdata)
tmodel2<-multinom(cate_l1~ hour+isweekend,
data=DF_checkin_weather,maxit = 1000)
y2=predict(tmodel2,newdata)
tmodel3<-multinom(cate_l1~ fog+snow+rain,
data=DF_checkin_weather,maxit = 1000)
y3=predict(tmodel3,newdata)
tmodel4<-multinom(cate_l1~ t1+t2+t3+t4+t5+t6+t7+t8+t9,
data=DF_checkin_weather,maxit = 1000)
y4=predict(tmodel4,newdata)
tmodel5<-multinom(cate_l1~ s1+s2+s3+s4+s5+s6+s7+s8+s9,
data=DF_checkin_weather,maxit = 1000)
y5=predict(tmodel5,newdata)
omp = data.frame(DF_checkin_weather$cate_l1,
y1,y2,y3,y4,y5)
View(omp)
