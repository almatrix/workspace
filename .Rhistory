facet_wrap(~cate_l1, ncol=2, nrow=5) +
coord_cartesian(ylim = c(0,0.2)) +
xlab("") +
scale_y_continuous(labels  = percent)
# ggplot(DF_all, aes(x=datetime, colour=isweekend, fill=isweekend)) +
#     geom_histogram(binwidth=1800) +
#     facet_grid(cate_l1~.)
dev.off()
rs <- dbSendQuery(conn,"select time, catehir.cate_name
from \"NewYorkCity\" city
join temp_category_newyork catels
on catels.venue_cate = city.venue_cate
join category_hierarchy_l1 catehir
on catels.level1 = catehir.id
where user_id=884681 and timestamps >= 1391212800
and timestamps <= 1391644800")
data <- fetch(rs, n = -1)
dbClearResult(rs)
data$datetime = strptime( strtrim(data$time,19),
format="%Y-%m-%d %H:%M:%S"
)
data$hour = format(data$datetime,"%H")
data$yearday = format(data$datetime,"%j")
data$weekday = ifelse(
(format(data$datetime,"%w")>5 | format(data$datetime,"%w")<1),
"Weekend", "Workday")
DF_date_hour_category_single = data.frame()
testlist=split(data,data$cate_name)
temp = lapply(testlist, function(i){
df = stats_by_date_hour(i, category = i[1,"cate_name"])
DF_date_hour_category_single <<- rbind(DF_date_hour_category_single,df)
})
rm(temp)
## plot
png(paste0(basedir,"img\\plot_date_hour_category_single.png"),width=1000)
ggplot(DF_date_hour_category_single, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
facet_wrap(~cate_l1, ncol=2, nrow=5) +
#coord_cartesian(ylim = c(0,0.2)) +
xlab("") +
scale_y_continuous(labels  = percent)
# ggplot(DF_all, aes(x=datetime, colour=isweekend, fill=isweekend)) +
#     geom_histogram(binwidth=1800) +
#     facet_grid(cate_l1~.)
dev.off()
L_date_hour_category_single=split(DF_date_hour_category_single,DF_date_hour_category_single$cate_l1)
png(paste0(basedir,"img\\plot_freq_category_single.png"),width=1000)
par(mfrow=c(2,5))
temp = lapply(seq_along(L_date_hour_category_single), function(i){
fre = spec.pgram(L_date_hour_category_single[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:180], fre[["spec"]][1:180],
type="l", main= names(L_date_hour_category_single[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
rs <- dbSendQuery(conn,"select time, catehir.cate_name
from \"NewYorkCity\" city
join temp_category_newyork catels
on catels.venue_cate = city.venue_cate
join category_hierarchy_l1 catehir
on catels.level1 = catehir.id
where user_id=884681 and timestamps >= 1391212800
and timestamps <= 1393804800")
data <- fetch(rs, n = -1)
dbClearResult(rs)
data$datetime = strptime( strtrim(data$time,19),
format="%Y-%m-%d %H:%M:%S"
)
data$hour = format(data$datetime,"%H")
data$yearday = format(data$datetime,"%j")
data$weekday = ifelse(
(format(data$datetime,"%w")>5 | format(data$datetime,"%w")<1),
"Weekend", "Workday")
DF_date_hour_category_single = data.frame()
testlist=split(data,data$cate_name)
temp = lapply(testlist, function(i){
df = stats_by_date_hour(i, category = i[1,"cate_name"])
DF_date_hour_category_single <<- rbind(DF_date_hour_category_single,df)
})
rm(temp)
## plot
png(paste0(basedir,"img\\plot_date_hour_category_single.png"),width=1000)
ggplot(DF_date_hour_category_single, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
facet_wrap(~cate_l1, ncol=2, nrow=5) +
#coord_cartesian(ylim = c(0,0.2)) +
xlab("") +
scale_y_continuous(labels  = percent)
# ggplot(DF_all, aes(x=datetime, colour=isweekend, fill=isweekend)) +
#     geom_histogram(binwidth=1800) +
#     facet_grid(cate_l1~.)
dev.off()
L_date_hour_category_single=split(DF_date_hour_category_single,DF_date_hour_category_single$cate_l1)
png(paste0(basedir,"img\\plot_freq_category_single.png"),width=1000)
par(mfrow=c(2,5))
temp = lapply(seq_along(L_date_hour_category_single), function(i){
fre = spec.pgram(L_date_hour_category_single[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:180], fre[["spec"]][1:180],
type="l", main= names(L_date_hour_category_single[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
L_date_hour_category_single$Residence
View(data)
df=testlist[[7]]
tab_date_hour = table(df$hour,df$yearday)
vec_date = as.vector(table(df$yearday))
tab_date_hour
hourlist = rownames(tab_date_hour)
daylist = colnames(tab_date_hour)
if(length(hourlist)<24){
## filling the row
for (i in 1:24){
hourname = ifelse( i<=10,  paste0("0", i-1),  as.character(i-1) )
if( rownames(tab_date_hour)[i]!= hourname | is.na(rownames(tab_date_hour)[i]) ) {
tab_date_hour = insertrow(tab_date_hour,i,name=hourname)
}
}
}
if(length(daylist)< (as.numeric(max(daylist))-as.numeric(min(daylist))+1) ){
## filling the column
for (i in 1:(as.numeric(max(daylist))-as.numeric(min(daylist))+1)){
datename = i + as.numeric(min(daylist)) - 1
if(datename<10) datename=paste0("00",datename)
else if(datename>=10 & datename<100) datename=paste0("0",datename)
else datename=as.character(datename)
if( colnames(tab_date_hour)[i]!= datename ) {
tab_date_hour = insertcol(tab_date_hour,i,name=datename)
vec_date = c(vec_date[1:(i-1)], 0, vec_date[i:length(vec_date)])
#                  names(vec_date)= c(names(vec_date)[1:(i-1)],datename,
#                                     names(vec_date)[i:length(vec_date)])
}
}
}
tab_date_hour
df_date_hour = data.frame(
count_hour = as.vector(tab_date_hour),   # how many checkins in this hour of this day
count_daily = rep(vec_date, each = nrow(tab_date_hour)), # total checkins in this day
hour = rep( rownames(tab_date_hour), ncol(tab_date_hour) ),
#prop = count_hour/count_daily,
datetime = strptime(paste(rep( colnames(tab_date_hour), each=nrow(tab_date_hour) ),
rep( rownames(tab_date_hour), ncol(tab_date_hour)      ) ),
format = "%j %H")
)
View(df_date_hour)
df_date_hour$prop = df_date_hour$count_hour/(df_date_hour$count_daily + 1E-6)
View(df_date_hour)
df_date_hour$weekday = ifelse(
(format(df_date_hour$datetime,"%w")>5 | format(df_date_hour$datetime,"%w")<1),
"Weekend", "Workday")
if(!is.na(category)){
df_date_hour$cate_l1 = category
}
View(df_date_hour)
ggplot(df_date_hour, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
xlab("") +
scale_y_continuous(labels  = percent)
ggplot(DF_date_hour_category_single, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
#geom_line() +
facet_wrap(~cate_l1, ncol=2, nrow=5) +
#coord_cartesian(ylim = c(0,0.2)) +
xlab("") +
scale_y_continuous(labels  = percent)
# ggplot(DF_all, aes(x=datetime, colour=isweekend, fill=isweekend)) +
#     geom_histogram(binwidth=1800) +
#     facet_grid(cate_l1~.)
DF_date_hour_category_single[DF_date_hour_category_single$cate_l1="Residence",]
DF_date_hour_category_single[DF_date_hour_category_single$cate_l1=="Residence",]
stats_by_date_hour(testlist[[7]], category = test[[7[1,"cate_name"])
stats_by_date_hour(testlist[[7]], category = test[[7]][1,"cate_name"])
stats_by_date_hour(testlist[[7]], category = testlist[[7]][1,"cate_name"])
stats_by_date_hour(testlist[[7]])
df=testlist[[7]]
stats_by_date_hour(df)
tab_date_hour = table(df$hour,df$yearday)
vec_date = as.vector(table(df$yearday))
## make sure that the table is all complete
hourlist = rownames(tab_date_hour)
daylist = colnames(tab_date_hour)
if(length(hourlist)<24){
## filling the row
for (i in 1:24){
hourname = ifelse( i<=10,  paste0("0", i-1),  as.character(i-1) )
if( rownames(tab_date_hour)[i]!= hourname | is.na(rownames(tab_date_hour)[i]) ) {
tab_date_hour = insertrow(tab_date_hour,i,name=hourname)
}
}
}
if(length(daylist)< (as.numeric(max(daylist))-as.numeric(min(daylist))+1) ){
## filling the column
for (i in 1:(as.numeric(max(daylist))-as.numeric(min(daylist))+1)){
datename = i + as.numeric(min(daylist)) - 1
if(datename<10) datename=paste0("00",datename)
else if(datename>=10 & datename<100) datename=paste0("0",datename)
else datename=as.character(datename)
if( colnames(tab_date_hour)[i]!= datename ) {
tab_date_hour = insertcol(tab_date_hour,i,name=datename)
vec_date = c(vec_date[1:(i-1)], 0, vec_date[i:length(vec_date)])
#                  names(vec_date)= c(names(vec_date)[1:(i-1)],datename,
#                                     names(vec_date)[i:length(vec_date)])
}
}
}
if(ncol(tab_date_hour)>=3){
tab_date_hour = tab_date_hour[,c(2:(ncol(tab_date_hour)-1))]  # make sure each day have 24h data
vec_date = vec_date[c(2:(length(vec_date)-1))] # the same date range
}
df_date_hour = data.frame(
count_hour = as.vector(tab_date_hour),   # how many checkins in this hour of this day
count_daily = rep(vec_date, each = nrow(tab_date_hour)), # total checkins in this day
hour = rep( rownames(tab_date_hour), ncol(tab_date_hour) ),
#prop = count_hour/count_daily,
datetime = strptime(paste(rep( colnames(tab_date_hour), each=nrow(tab_date_hour) ),
rep( rownames(tab_date_hour), ncol(tab_date_hour)      ) ),
format = "%j %H")
)
View(df_date_hour)
tab_date_hour = table(df$hour,df$yearday)
tab_date_hour
stats_by_date_hour <- function(df, category=NA) {
tab_date_hour = table(df$hour,df$yearday)
vec_date = as.vector(table(df$yearday))
## make sure that the table is all complete
hourlist = rownames(tab_date_hour)
daylist = colnames(tab_date_hour)
if(length(hourlist)<24){
## filling the row
for (i in 1:24){
hourname = ifelse( i<=10,  paste0("0", i-1),  as.character(i-1) )
if( rownames(tab_date_hour)[i]!= hourname | is.na(rownames(tab_date_hour)[i]) ) {
tab_date_hour = insertrow(tab_date_hour,i,name=hourname)
}
}
}
if(length(daylist)< (as.numeric(max(daylist))-as.numeric(min(daylist))+1) ){
## filling the column
for (i in 1:(as.numeric(max(daylist))-as.numeric(min(daylist))+1)){
datename = i + as.numeric(min(daylist)) - 1
if(datename<10) datename=paste0("00",datename)
else if(datename>=10 & datename<100) datename=paste0("0",datename)
else datename=as.character(datename)
if( colnames(tab_date_hour)[i]!= datename ) {
tab_date_hour = insertcol(tab_date_hour,i,name=datename)
vec_date = c(vec_date[1:(i-1)], 0, vec_date[i:length(vec_date)])
#                  names(vec_date)= c(names(vec_date)[1:(i-1)],datename,
#                                     names(vec_date)[i:length(vec_date)])
}
}
}
#
#     if(ncol(tab_date_hour)>=3){
#         tab_date_hour = tab_date_hour[,c(2:(ncol(tab_date_hour)-1))]  # make sure each day have 24h data
#         vec_date = vec_date[c(2:(length(vec_date)-1))] # the same date range
#     }
df_date_hour = data.frame(
count_hour = as.vector(tab_date_hour),   # how many checkins in this hour of this day
count_daily = rep(vec_date, each = nrow(tab_date_hour)), # total checkins in this day
hour = rep( rownames(tab_date_hour), ncol(tab_date_hour) ),
#prop = count_hour/count_daily,
datetime = strptime(paste(rep( colnames(tab_date_hour), each=nrow(tab_date_hour) ),
rep( rownames(tab_date_hour), ncol(tab_date_hour)      ) ),
format = "%j %H")
)
df_date_hour$prop = df_date_hour$count_hour/(df_date_hour$count_daily + 1E-6)
df_date_hour$weekday = ifelse(
(format(df_date_hour$datetime,"%w")>5 | format(df_date_hour$datetime,"%w")<1),
"Weekend", "Workday")
if(!is.na(category)){
df_date_hour$cate_l1 = category
}
df_date_hour
}
data$hour = format(data$datetime,"%H")
data$yearday = format(data$datetime,"%j")
data$weekday = ifelse(
(format(data$datetime,"%w")>5 | format(data$datetime,"%w")<1),
"Weekend", "Workday")
DF_date_hour_category_single = data.frame()
testlist=split(data,data$cate_name)
temp = lapply(testlist, function(i){
df = stats_by_date_hour(i, category = i[1,"cate_name"])
DF_date_hour_category_single <<- rbind(DF_date_hour_category_single,df)
})
rm(temp)
png(paste0(basedir,"img\\plot_date_hour_category_single.png"),width=1000)
ggplot(DF_date_hour_category_single, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
#geom_line() +
facet_wrap(~cate_l1, ncol=2, nrow=5) +
#coord_cartesian(ylim = c(0,0.2)) +
xlab("") +
scale_y_continuous(labels  = percent)
# ggplot(DF_all, aes(x=datetime, colour=isweekend, fill=isweekend)) +
#     geom_histogram(binwidth=1800) +
#     facet_grid(cate_l1~.)
dev.off()
png(paste0(basedir,"img\\plot_date_hour_category_single.png"),width=1000)
ggplot(DF_date_hour_category_single, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
facet_wrap(~cate_l1, ncol=2, nrow=5) +
#coord_cartesian(ylim = c(0,0.2)) +
xlab("") +
scale_y_continuous(labels  = percent)
# ggplot(DF_all, aes(x=datetime, colour=isweekend, fill=isweekend)) +
#     geom_histogram(binwidth=1800) +
#     facet_grid(cate_l1~.)
dev.off()
L_diff=split(DF_diff,DF_diff$cate_l1)
png(paste0(basedir,"img\\plot_diff_freq_category.png"),width=1000)
par(mfrow=c(2,5))
temp = lapply(seq_along(L_diff), function(i){
fre = spec.pgram(L_diff[[i]]$difference, plot=FALSE)
plot(fre[["freq"]][1:180], fre[["spec"]][1:180],
type="l", main= names(L_diff[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
L_date_hour_category_single=split(DF_date_hour_category_single,DF_date_hour_category_single$cate_l1)
png(paste0(basedir,"img\\plot_freq_category_single.png"),width=1000)
par(mfrow=c(2,5))
temp = lapply(seq_along(L_date_hour_category_single), function(i){
fre = spec.pgram(L_date_hour_category_single[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:180], fre[["spec"]][1:180],
type="l", main= names(L_date_hour_category_single[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
rs <- dbSendQuery(conn,"select time, catehir.cate_name
from \"NewYorkCity\" city
join temp_category_newyork catels
on catels.venue_cate = city.venue_cate
join category_hierarchy_l1 catehir
on catels.level1 = catehir.id
where user_id=884681 and timestamps >= 1391212800")
#and timestamps <= 1393804800")
data <- fetch(rs, n = -1)
dbClearResult(rs)
data$datetime = strptime( strtrim(data$time,19),
format="%Y-%m-%d %H:%M:%S"
)
data$hour = format(data$datetime,"%H")
data$yearday = format(data$datetime,"%j")
data$weekday = ifelse(
(format(data$datetime,"%w")>5 | format(data$datetime,"%w")<1),
"Weekend", "Workday")
DF_date_hour_category_single = data.frame()
testlist=split(data,data$cate_name)
temp = lapply(testlist, function(i){
df = stats_by_date_hour(i, category = i[1,"cate_name"])
DF_date_hour_category_single <<- rbind(DF_date_hour_category_single,df)
})
rm(temp)
## plot
png(paste0(basedir,"img\\plot_date_hour_category_single.png"),width=1000)
ggplot(DF_date_hour_category_single, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
facet_wrap(~cate_l1, ncol=2, nrow=5) +
#coord_cartesian(ylim = c(0,0.2)) +
xlab("") +
scale_y_continuous(labels  = percent)
# ggplot(DF_all, aes(x=datetime, colour=isweekend, fill=isweekend)) +
#     geom_histogram(binwidth=1800) +
#     facet_grid(cate_l1~.)
dev.off()
L_date_hour_category_single=split(DF_date_hour_category_single,DF_date_hour_category_single$cate_l1)
png(paste0(basedir,"img\\plot_freq_category_single.png"),width=1000)
par(mfrow=c(2,5))
temp = lapply(seq_along(L_date_hour_category_single), function(i){
fre = spec.pgram(L_date_hour_category_single[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:180], fre[["spec"]][1:180],
type="l", main= names(L_date_hour_category_single[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
DF_date_hour_single = stats_by_date_hour(data)
## plot
png(paste0(basedir,"img\\plot_date_hour_single.png"),width=1000)
ggplot(DF_date_hour, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
xlab("") +
scale_y_continuous(labels  = percent)
dev.off()
DF_date_hour_single = stats_by_date_hour(data)
## plot
png(paste0(basedir,"img\\plot_date_hour_single.png"),width=1000)
ggplot(DF_date_hour_single, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
xlab("") +
scale_y_continuous(labels  = percent)
dev.off()
globalfresingle = spec.pgram(DF_date_hour_single$prop, plot=FALSE)
png(paste0(basedir,"img\\plot_freq_single.png"))
plot(globalfresingle[["freq"]][1:180],globalfre[["spec"]][1:180],
type="l", main="Global frequency-spectrum",
xlab="Frequency", ylab="Spectrum")
dev.off()
globalfresingle = spec.pgram(DF_date_hour_single$prop, plot=FALSE)
png(paste0(basedir,"img\\plot_freq_single.png"))
plot(globalfresingle[["freq"]][1:180],globalfresingle[["spec"]][1:180],
type="l", main="Global frequency-spectrum",
xlab="Frequency", ylab="Spectrum")
dev.off()
png(paste0(basedir,"img\\plot_freq_single.png"))
plot(globalfresingle[["freq"]][1:180],globalfresingle[["spec"]][1:180],
type="l", main="Global frequency-spectrum for single user",
xlab="Frequency", ylab="Spectrum")
dev.off()
rs <- dbSendQuery(conn,"select time, catehir.cate_name
from \"NewYorkCity\" city
join temp_category_newyork catels
on catels.venue_cate = city.venue_cate
join category_hierarchy_l1 catehir
on catels.level1 = catehir.id
where user_id=884681 and timestamps >= 1391212800
and timestamps <= 1393804800")
data <- fetch(rs, n = -1)
dbClearResult(rs)
data$datetime = strptime( strtrim(data$time,19),
format="%Y-%m-%d %H:%M:%S"
)
data$hour = format(data$datetime,"%H")
data$yearday = format(data$datetime,"%j")
data$weekday = ifelse(
(format(data$datetime,"%w")>5 | format(data$datetime,"%w")<1),
"Weekend", "Workday")
DF_date_hour_single = stats_by_date_hour(data)
## plot
png(paste0(basedir,"img\\plot_date_hour_single.png"),width=1000)
ggplot(DF_date_hour_single, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
xlab("") +
scale_y_continuous(labels  = percent)
dev.off()
DF_date_hour_single = stats_by_date_hour(data)
## plot
png(paste0(basedir,"img\\plot_date_hour_single.png"),width=1000)
ggplot(DF_date_hour_single, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
xlab("") +
scale_y_continuous(labels  = percent)
dev.off()
rs <- dbSendQuery(conn,"select time, catehir.cate_name
from \"NewYorkCity\" city
join temp_category_newyork catels
on catels.venue_cate = city.venue_cate
join category_hierarchy_l1 catehir
on catels.level1 = catehir.id
where user_id=884681 and timestamps >= 1391212800
and timestamps <= 1392076800")
data <- fetch(rs, n = -1)
dbClearResult(rs)
data$datetime = strptime( strtrim(data$time,19),
format="%Y-%m-%d %H:%M:%S"
)
data$hour = format(data$datetime,"%H")
data$yearday = format(data$datetime,"%j")
data$weekday = ifelse(
(format(data$datetime,"%w")>5 | format(data$datetime,"%w")<1),
"Weekend", "Workday")
DF_date_hour_single = stats_by_date_hour(data)
## plot
png(paste0(basedir,"img\\plot_date_hour_single.png"),width=1000)
ggplot(DF_date_hour_single, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
xlab("") +
scale_y_continuous(labels  = percent)
dev.off()
DF_hour_single = stats_checkin_by_hour(data)
## plot
png(paste0(basedir,"img\\plot_mean_hour_single.png"),width=1000)
ggplot(DF_hour_single, aes(x=hour,y=prop)) +
geom_bar(stat="identity") +
xlab("") +
scale_y_continuous(labels  = percent)
dev.off()
rs <- dbSendQuery(conn,"select time, catehir.cate_name
from \"NewYorkCity\" city
join temp_category_newyork catels
on catels.venue_cate = city.venue_cate
join category_hierarchy_l1 catehir
on catels.level1 = catehir.id
where user_id=884681 and timestamps >= 1391212800")
data <- fetch(rs, n = -1)
dbClearResult(rs)
data$datetime = strptime( strtrim(data$time,19),
format="%Y-%m-%d %H:%M:%S"
)
data$hour = format(data$datetime,"%H")
data$yearday = format(data$datetime,"%j")
data$weekday = ifelse(
(format(data$datetime,"%w")>5 | format(data$datetime,"%w")<1),
"Weekend", "Workday")
DF_hour_single = stats_checkin_by_hour(data)
## plot
png(paste0(basedir,"img\\plot_mean_hour_single.png"),width=1000)
ggplot(DF_hour_single, aes(x=hour,y=prop)) +
geom_bar(stat="identity") +
xlab("") +
scale_y_continuous(labels  = percent)
dev.off()
