})
NA
})
transition.matrix[16,]
sum(transition.matrix[16,])
for(i in 1:374) { if(  is.na(sum(transition.matrix[i,]))  ) { print(i) }  }
for(i in 1:374) { if(  (sum(transition.matrix[i,])!=1 )  ) { print(i) }  }
temp = lapply(split(sequence.global, sequence.global$last_cate), function(lst){
total.sum <- sum(lst$weight)
transition.matrix[paste0("cate",unique(lst$last_cate)),
paste0("cate",sort(unique(lst$cate)))] <<-
sapply( split(lst, lst$cate), function(cur){
if(total.sum) { p = sum(cur$weight) / total.sum }
else { p = 1/length(unique(lst$cate)) }  ## for all zeros
p
})
NA
})
for(i in 1:374) { if(  (sum(transition.matrix[i,])!=1 )  ) { print(i) }  }
temp = lapply(split(sequence.global, sequence.global$last_cate), function(lst){
total.sum <- sum(lst$weight)
transition.matrix[paste0("cate",unique(lst$last_cate)),
paste0("cate",sort(unique(lst$cate)))] <<-
sapply( split(lst, lst$cate), function(cur){
if(total.sum!=0) { p = sum(cur$weight) / total.sum }
else { p = 1/length(unique(lst$cate)) }  ## for all zeros
p
})
NA
})
transition.matrix <- matrix(0,nrow=length(unique.cates),  ncol=length(unique.cates),
dimnames=list(paste0("cate",unique.cates),
paste0("cate",unique.cates)));
temp = lapply(split(sequence.global, sequence.global$last_cate), function(lst){
total.sum <- sum(lst$weight)
transition.matrix[paste0("cate",unique(lst$last_cate)),
paste0("cate",sort(unique(lst$cate)))] <<-
sapply( split(lst, lst$cate), function(cur){
if(total.sum!=0) { p = sum(cur$weight) / total.sum }
else { p = 1/length(unique(lst$cate)) }  ## for all zeros
p
})
NA
})
for(i in 1:374) { if(  (sum(transition.matrix[i,])!=1 )  ) { print(i) }  }
sum(transition.matrix[11,])
sum(transition.matrix[33,])
sum(transition.matrix[12,])
for(i in 1:374) { print(sum(transition.matrix[i,]) )  }
mcSequence <- new("markovchain",
states = paste0("cate",unique(sequence.global$last_cate)),
transitionMatrix = transition.matrix,
name = "sequence")
predict(object = mcSequence, newdata = c("cate1","cate2"),n.ahead = 3)
?predict
save(transition.matrix,file="D:\\Experiments\\R\\data\\transition.matrix_0814.Rda")
plot(mcSequence)
levels.cates <- levels(checkin.global$cate_l2)
levels.cates[1:5]
unique.cates <- sort(unique(sequence.global$last_cate))
levels.cates <- levels(checkin.global$cate_l2)
transition.matrix <- matrix(0,nrow=length(unique.cates),  ncol=length(unique.cates),
dimnames=list(levels.cates[unique.cates],
levels.cates[unique.cates]));
temp = lapply(split(sequence.global, sequence.global$last_cate), function(lst){
total.sum <- sum(lst$weight)
transition.matrix[ levels.cates[unique(lst$last_cate)],
levels.cates[sort(unique(lst$cate))] ] <<-
sapply( split(lst, lst$cate), function(cur){
if(total.sum!=0) { p = sum(cur$weight) / total.sum }
else { p = 1/length(unique(lst$cate)) }  ## for all zeros
p
})
NA
})
rm(temp)
transition.matrix[1:10,1:7]
mcSequence <- new("markovchain",
states = levels.cates[unique(sequence.global$last_cate)],
transitionMatrix = transition.matrix,
name = "sequence")
predict(object = mcSequence, newdata = c("American Restaurant"),n.ahead = 3)
transition.matrix[5,]
sort(transition.matrix[5,])
sort(transition.matrix["American Restaurant",])
?sort
sort(transition.matrix["American Restaurant",],decreasing=TRUE)[1:5]
predict(object = mcSequence, newdata = c("American Restaurant"),n.ahead = 3)
transition.matrix["American Restaurant","Taco Place"]
sort(transition.matrix["Chinese Restaurant",],decreasing=TRUE)[1:5]
sort(transition.matrix["Italian",],decreasing=TRUE)[1:5]
sort(transition.matrix["Italian Restaurant",],decreasing=TRUE)[1:5]
sort(transition.matrix["Hotel",],decreasing=TRUE)[1:5]
sort(transition.matrix["Stadium",],decreasing=TRUE)[1:5]
DF_weather = read.csv( "D:\\Experiments\\R\\data\\test.csv")
score = read.csv( "D:\\Experiments\\R\\data\\test.csv")
rm(DF_weather)
score = read.csv( "D:\\Experiments\\R\\data\\test.csv")
score = read.csv( "D:\\Experiments\\R\\data\\test.csv")
score = read.csv( "D:\\Experiments\\R\\data\\test.csv")
res.messi = xtabs(~res+messi, data=score)
chisq.test(res.messi)
res.dimaria = xtabs(~res+dimaria, data=score)
chisq.test(res.dimaria)
res.others = xtabs(~res+others, data=score)
chisq.test(res.others)
score = read.csv( "D:\\Experiments\\R\\data\\test.csv")
res.messi = xtabs(~res+messi, data=score)
chisq.test(res.messi)
res.dimaria = xtabs(~res+dimaria, data=score)
chisq.test(res.dimaria)
res.others = xtabs(~res+others, data=score)
chisq.test(res.others)
score = read.csv( "D:\\Experiments\\R\\data\\test.csv")
res.messi = xtabs(~res+messi, data=score)
chisq.test(res.messi)
res.dimaria = xtabs(~res+dimaria, data=score)
chisq.test(res.dimaria)
res.others = xtabs(~res+others, data=score)
chisq.test(res.others)
res.messi.dimaria = xtabs(~res+messi+dimaria)
chisq.test(res.messi.dimaria)
res.messi.dimaria = xtabs(~res+messi+dimaria, data=score)
chisq.test(res.messi.dimaria)
library(nnet)
tmodel<-multinom(res~ messi+dimaria+others,
data=score,maxit = 1000)
tsummary = summary(tmodel)
z = tsummary$coefficients/tsummary$standard.errors
p = (1 - pnorm(abs(z), 0, 1)) * 2
p
tsummary$coefficients
res.table = table(score$res)
res.table = as.data.frame(table(score$res))
View(res.table)
odds.win = res.table[which(res.table$Var1=="win"),"Freq"] /
res.table[which(res.table$Var1=="even"),"Freq"]
xtabs(~res+messi+dimaria+others, data = score[which(score$res) %in% c("win","even"), ])
xtabs(~res+messi+dimaria+others, data = score[which(score$res %in% c("win","even")), ])
score = read.csv( "D:\\Experiments\\R\\data\\test.csv")
contingency.win.even = as.data.frame(
xtabs(~res+messi+dimaria+others, data = score[which(score$res %in% c("win","even")), ]))
View(contingency.win.even)
score[which(score$res %in% c("win","even")), ]
xtabs(~res+messi+dimaria+others, data = score[which(score$res %in% c("win","even")), ])
data.win.even = score[which(score$res %in% c("win","even")), ]
contingency.win.even = as.data.frame(
xtabs(~res+messi+dimaria+others, data = data.win.even) )
View(contingency.win.even)
View(data.win.even)
View(contingency.win.even)
contingency.win.even=contingency.win.even[contingency.win.even$Freq!=0,]
?relevel
contingency.win.even$res.relevel(c("win","even"))
relevel(contingency.win.even$res, c("win","even"))
?levels
levels(contingency.win.even$res)=c("win","even")
View(contingency.win.even)
library(nnet)
tmodel<-multinom(res~ messi+dimaria+others,
data=score,maxit = 1000)
tsummary = summary(tmodel)
z = tsummary$coefficients/tsummary$standard.errors
p = (1 - pnorm(abs(z), 0, 1)) * 2
tsummary
dcast
?dcast
??dcast
?reshape2::dcast
odds.win.wide = dcast(odds.win, res+messi+dimaria~others)
library(reshape2)
odds.win.wide = dcast(odds.win, res+messi+dimaria~others)
# baseline is "even"
# first: logistic regression for "win" vs "even"
data.win.even = score[which(score$res %in% c("win","even")), ]
contingency.win.even = as.data.frame(
xtabs(~res+messi+dimaria+others, data = data.win.even) )
contingency.win.even=contingency.win.even[contingency.win.even$Freq!=0,]
res.table = as.data.frame(table(score$res))
odds.win = res.table[which(res.table$Var1=="win"),"Freq"] /
res.table[which(res.table$Var1=="even"),"Freq"]
library(reshape2)
odds.win.wide = dcast(odds.win, res+messi+dimaria~others)
odds.win.wide = dcast(contingency.win.even, res+messi+dimaria~others)
score = read.csv( "D:\\Experiments\\R\\data\\test.csv")
data.win.even = score[which(score$res %in% c("win","even")), ]
contingency.win.even = as.data.frame(
xtabs(~res+messi+dimaria+others, data = data.win.even) )
contingency.win.even=contingency.win.even[contingency.win.even$Freq!=0,]
library(reshape2)
contingency.win.even.wide = dcast(contingency.win.even, res+messi+dimaria~others)
View(contingency.win.even)
View(contingency.win.even.wide)
contingency.win.even.wide = dcast(contingency.win.even, res+messi+dimaria~others, value.var="Freq")
View(contingency.win.even.wide)
View(contingency.win.even.wide)
?reshape_wide
??reshape_wide
model.matrix(~ factor(binom$others) - 1)
model.matrix(~ factor(contingency.win.even$others) - 1)
model.matrix( ~ res+messi+dimaria+others,contingency.win.even)
model.matrix( ~ messi+dimaria+others,contingency.win.even)
model.matrix( res~ messi+dimaria+others,contingency.win.even)
model.matrix( Freq~ res+messi+dimaria+others,contingency.win.even)
model.matrix( ~ Freq+messi+dimaria+others,contingency.win.even)
contingency.win.even = as.data.frame(
xtabs(~res+messi+dimaria+others, data = score$res) )
contingency.win.even$res <- factor(contingency.win.even$res)
model.matrix( ~ Freq+res+messi+dimaria+others,contingency.win.even)
View(contingency.win.even)
contingency.win.even.wide = model.matrix( ~ Freq+res+messi+dimaria+others,contingency.win.even)
View(contingency.win.even.wide)
contingency.win.even.wide = as.data.frame(
model.matrix( ~ Freq+res+messi+dimaria+others,contingency.win.even))
View(contingency.win.even.wide)
View(contingency.win.even)
View(contingency.win.even.wide)
View(data.win.even)
data.win.wide = as.data.frame(
model.matrix( ~ res+messi+dimaria+others,data.win.wide))
data.win.wide = as.data.frame(
model.matrix( ~ res+messi+dimaria+others,data.win))
data.win.even.wide = as.data.frame(
model.matrix( ~ res+messi+dimaria+others,data.win.even))
View(data.win.even)
View(data.win.even.wide)
data.win.even$res <- factor(data.win.even$res)
data.win.even.wide = as.data.frame(
model.matrix( ~ res+messi+dimaria+others,data.win.even))
View(data.win.even.wide)
tmodel<-multinom(res~ messi+dimaria+others,
data=score,maxit = 1000)
tsummary = summary(tmodel)
tsummary
View(contingency.win.even.wide)
setwd("D:\\GitRepos\\work")
library(scales)
library(ggplot2)
library(TSA)
library(DBI)
library(RPostgreSQL)
source("fun\\TableOperations.R")
source("fun\\GenerateStatsDataFrame.R")
source("fun\\DBconn.R")
load("D:\\Experiments\\R\\data\\checkin_global_0813.Rda")
DF_all=checkin.global
rm(checkin.global)
L_category = split(DF_all, DF_all$cate_l1)
DF_date_hour_category = data.frame()
temp = lapply(L_category, function(i){
df = stats_by_date_hour(i, category = i[1,"cate_l1"])
DF_date_hour_category <<- rbind(DF_date_hour_category,df)
})
rm(temp)
L_date_hour_category=split(DF_date_hour_category,DF_date_hour_category$cate_l1)
png(paste0(basedir,"img\\plot_freq_category.png"),width=1000)
par(mfrow=c(2,5))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:180], fre[["spec"]][1:180],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
L_date_hour_category=split(DF_date_hour_category,DF_date_hour_category$cate_l1)
png(paste0(basedir,"img\\plot_freq_category.png"),width=1000)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:180], fre[["spec"]][1:180],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
basedir = "D:\\Experiments\\R\\"
L_date_hour_category=split(DF_date_hour_category,DF_date_hour_category$cate_l1)
png(paste0(basedir,"img\\plot_freq_category.png"),width=1000)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:180], fre[["spec"]][1:180],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
paste0(basedir,"img\\plot_freq_category.png")
L_date_hour_category=split(DF_date_hour_category,DF_date_hour_category$cate_l1)
png(paste0(basedir,"img\\plot_freq_category.png"),width=800)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:500], fre[["spec"]][1:500],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
L_date_hour_category=split(DF_date_hour_category,DF_date_hour_category$cate_l1)
png(paste0(basedir,"img\\plot_freq_category.png"),width=650)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:500], fre[["spec"]][1:500],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
L_date_hour_category=split(DF_date_hour_category,DF_date_hour_category$cate_l1)
png(paste0(basedir,"img\\plot_freq_category.png"),width=700)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
L_date_hour_category=split(DF_date_hour_category,DF_date_hour_category$cate_l1)
ppi <- 300
png(paste0(basedir,"img\\plot_freq_category.png"),width=3*ppi, height=2*ppi, res=ppi)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
postscript(paste0(basedir,"img\\plot_freq_category.eps"),
width = 4, height = 6, horizontal = FALSE, onefile = FALSE)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
L_date_hour_category=split(DF_date_hour_category,DF_date_hour_category$cate_l1)
ppi <- 300
png(paste0(basedir,"img\\plot_freq_category.png"),res=ppi)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
ppi <- 300
png(paste0(basedir,"img\\plot_freq_category.png"))
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
png(paste0(basedir,"img\\plot_freq_category.png"),res=300)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
win.metafile(paste0(basedir,"img\\plot_freq_category.wmf"))
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
postscript(paste0(basedir,"img\\plot_freq_category.eps"))
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
postscript(paste0(basedir,"img\\plot_freq_category.eps"),horizontal = FALSE, onefile = FALSE,)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
cairo_ps(paste0(basedir,"img\\plot_freq_category.eps"))
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
cairo_ps(paste0(basedir,"img\\plot_freq_category.eps"),onefile = TRUE)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
png(paste0(basedir,"img\\plot_freq_category.png"),res=300)
#win.metafile(paste0(basedir,"img\\plot_freq_category.wmf"))
#cairo_ps(paste0(basedir,"img\\plot_freq_category.eps"),onefile = TRUE)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
png(paste0(basedir,"img\\plot_freq_category.png"),res=72)
#win.metafile(paste0(basedir,"img\\plot_freq_category.wmf"))
#cairo_ps(paste0(basedir,"img\\plot_freq_category.eps"),onefile = TRUE)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
?ong
?png
png(paste0(basedir,"img\\plot_freq_category.png"), width = 6*ppi, height = 8*ppi, res=ppi)
#win.metafile(paste0(basedir,"img\\plot_freq_category.wmf"))
#cairo_ps(paste0(basedir,"img\\plot_freq_category.eps"),onefile = TRUE)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
png(paste0(basedir,"img\\plot_freq_category.png"), width = 8*ppi, height = 6*ppi, res=ppi)
#win.metafile(paste0(basedir,"img\\plot_freq_category.wmf"))
#cairo_ps(paste0(basedir,"img\\plot_freq_category.eps"),onefile = TRUE)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
png(paste0(basedir,"img\\plot_freq_category.png"), width = 4*ppi, height = 3*ppi, res=ppi)
#win.metafile(paste0(basedir,"img\\plot_freq_category.wmf"))
#cairo_ps(paste0(basedir,"img\\plot_freq_category.eps"),onefile = TRUE)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
png(paste0(basedir,"img\\plot_freq_category.png"), width = 6*ppi, height = 4.5*ppi, res=ppi)
#win.metafile(paste0(basedir,"img\\plot_freq_category.wmf"))
#cairo_ps(paste0(basedir,"img\\plot_freq_category.eps"),onefile = TRUE)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
?ploy
>plot
?plot
png(paste0(basedir,"img\\plot_freq_category.png"), width = 8*ppi, height = 6*ppi, res=ppi)
#win.metafile(paste0(basedir,"img\\plot_freq_category.wmf"))
#cairo_ps(paste0(basedir,"img\\plot_freq_category.eps"),onefile = TRUE)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
dev.off()
png(paste0(basedir,"img\\plot_date_hour_category.png"),width=1000)
ggplot(DF_date_hour_category, aes(x=datetime, y=prop)) +
geom_point(aes(x=datetime, y=prop, color=weekday)) +
geom_line() +
facet_wrap(~cate_l1, ncol=2, nrow=5) +
coord_cartesian(ylim = c(0,0.2)) +
xlab("") +
scale_y_continuous(labels  = percent)
# ggplot(DF_all, aes(x=datetime, colour=isweekend, fill=isweekend)) +
#     geom_histogram(binwidth=1800) +
#     facet_grid(cate_l1~.)
dev.off()
cate.conds = xtabs(~conds+cate_l1, data=checkin.global)
cate.conds = as.table(cate.conds[rowSums(cate.conds)>0,colSums(cate.conds)>0])
chisq.test(cate.conds)
load("D:\\Experiments\\R\\data\\checkin_global_0813.Rda")
cate.conds = xtabs(~conds+cate_l1, data=checkin.global)
summary(cate.conds)
