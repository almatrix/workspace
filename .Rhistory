logit.model = glm(obs$result~obs$messi*obs$dimaria, family=binomial (link = "logit" ))
summary(loglin.model)
summary(logit.model)
loglin.model = glm(Freq ~   messi*dimaria*result, data=freq, family=poisson)
summary(loglin.model)
update(loglin.model,.~.-(messiTRUE+dimariaTRUE+messiTRUE:dimariaTRUE))
summary(update(loglin.model,.~.-(messiTRUE+dimariaTRUE+messiTRUE:dimariaTRUE)))
glm(formula = Freq ~  result +  messi:result + dimaria:result + messi:dimaria:result, family = poisson,
data = freq)
newmodel=glm(formula = Freq ~  result +  messi:result + dimaria:result + messi:dimaria:result, family = poisson,
data = freq)
summary(newmodel)
obs =  data.frame(
"result" = c( "win", "lose" , "win" , "lose" , "win" , "win" , "win" , "lose" , "win", "win" , "win" , "lose" , "win" , "lose" , "win" , "win" , "win" , "lose" , "win", "win" , "win" , "lose" , "win" , "lose" , "win" , "win" , "win" , "lose" , "win", "win" , "win" , "lose" , "win" , "lose" , "win" , "win" , "win" , "lose" , "win", "win" , "lose" , "win" , "lose" , "win" , "win" , "lose" , "win" , "lose" , "lose", "lose" , "lose" , "win" , "lose" , "win" , "win" , "lose" , "win" , "lose" , "lose", "lose" , "lose" , "win" , "lose" , "win" , "win" , "lose" , "win" , "lose" , "lose", "lose" , "lose" , "win" , "lose" , "win" , "win" , "lose" , "win" , "lose" , "lose", "lose" ),
"messi" = rep( c( TRUE, FALSE), each=40 ),
"dimaria" = rep( c( TRUE, FALSE), 40), "temp"=runif(40,0,1) )
loglm(~messi*dimaria*result*temp, data=table (obs))
sat.model=loglm(~messi*dimaria*result*temp, data=table (obs))
summary(sat.model)
logit.model = glm(obs$result~obs$messi*obs$dimaria*temp, family=binomial (link = "logit" ))
logit.model = glm(obs$result~obs$messi*obs$dimaria*obstemp, family=binomial (link = "logit" ))
logit.model = glm(obs$result~obs$messi*obs$dimaria*obs$temp, family=binomial (link = "logit" ))
summary(logit.model)
source("fun\\mathmatrixcal.R")
basedir = "D:\\Experiments\\R\\"
DF_checkin = read.csv( paste0(basedir, "data\\userA.csv"),
header=TRUE, sep=",", #nrows=100000,
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"factor", "numeric","numeric",
"numeric","character","factor",
"factor")
)
## load weather
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
DF_weather$fog=as.logical(DF_weather$fog)
DF_weather$rain=as.logical(DF_weather$rain)
DF_weather$snow=as.logical(DF_weather$snow)
DF_weather$thunder=as.logical(DF_weather$thunder)
DF_weather$tornado=as.logical(DF_weather$tornado)
DF_checkin$datetime = strptime( strtrim(DF_checkin$localtime,19),
format="%Y-%m-%d %H:%M:%S")
## join checkin data with weather data based on timestamps
DF_checkin_weather = joindfsbytime(DF_checkin, DF_weather)
#rm(DF_checkin, DF_weather)
## deal with time
DF_checkin_weather$hour = as.factor(format(DF_checkin_weather$datetime,"%H"))
DF_checkin_weather$yearday = format(DF_checkin_weather$datetime,"%j")
DF_checkin_weather$weekday = format(DF_checkin_weather$datetime,"%w")
DF_checkin_weather$isweekend = as.factor(ifelse(
( DF_checkin_weather$weekday>5 | DF_checkin_weather$weekday<1),
"Weekend", "Workday"))
## add record for last checkin
DF_checkin_weather = copylastcheckinrec(DF_checkin_weather)
freq = xtabs(~hour+cate_l1,data=DF_checkin_weather)
summary(glm(Freq ~ hour*cate_l1, data=freq, family=poisson))
hour.cate = glm(Freq ~ hour*cate_l1, data=freq, family=poisson))
hour.cate = glm(Freq ~ hour*cate_l1, data=freq, family=poisson)
step(hour.cate)
part=data.frame("hour"=DF_checkin_weather$hour, "cate_l1"=DF_checkin_weather$cate_l1, "isweekend"=DF_checkin_weather$isweekend)
part.wide = dcast(part, isweekend~cate_l1)
?dcast
??dcast
?dcast.data.table
??dcast.data.table
?dcast
??dcast
install.packages("reshape2")
?dcast
??dcast
library("reshape2", lib.loc="D:/Program Files/R/R-3.1.1/library")
??dcast
?dcast
melted = melt(part)
melted = melt.data.frame(part)
library(data.table)
A <- data.table(x = c(1,1,2,2), y = c(1,2,1,2), v = c(0.1,0.2,0.3,0.4))
A <- data.frame(x = c(1,1,2,2), y = c(1,2,1,2), v = c(0.1,0.2,0.3,0.4))
A=as.table(A)
A=as.table(matrix(x = c(1,1,2,2), y = c(1,2,1,2), v = c(0.1,0.2,0.3,0.4)))
A=matrix(x = c(1,1,2,2), y = c(1,2,1,2), v = c(0.1,0.2,0.3,0.4))
A=matrix(x = c(1,1,2,2), y = c(1,2,1,2), v = c(0.1,0.2,0.3,0.4))
A <- data.frame(x = c(1,1,2,2), y = c(1,2,1,2), v = c(0.1,0.2,0.3,0.4))
DT[,lapply(.SD,sum),by=x]
DT[,lapply(.A,sum),by=x]
A[,lapply(.SD,sum),by=x]
dcast.data.table(A,x~y)
?cast.data.table
?dcast.data.table
??dcast.data.table
install.packages("data.table")
??dcast.data.table
library(data.table)
A <- data.table(x = c(1,1,2,2), y = c(1,2,1,2), v = c(0.1,0.2,0.3,0.4))
View(A)
dcast.data.table(A,x~y)
dcast.data.table(A,x~y,value.var=c("v",guess(A)))
dcast.data.table(A,x~y,value.var=c("a","b","c","d"))
dcast.data.table(A,x~y,value.var="a")
dcast.data.table(A,x~y,value.var=a)
dcast.data.table(A,x~y,value.var=y)
dcast.data.table(A,x~y,value.var="y")
part=data.table("hour"=DF_checkin_weather$hour, "cate_l1"=DF_checkin_weather$cate_l1, "isweekend"=DF_checkin_weather$isweekend)
dcast.data.table(A,x~y,value.var=paste0("v",y))
dcast.data.table(A,x~y,value.var=paste0("v",A$y))
dcast.data.table(A,x~y,value.var=y))
dcast.data.table(A,x~y,value.var="y")
dcast.data.table(part,isweekend~hour)
View(part)
dcast.data.table(part,catel1~hour+isweekend)
dcast.data.table(part,cate_l1~hour+isweekend)
part.freq=dcast.data.table(part,cate_l1~hour+isweekend)
dimnames(part.freq)
part.freq=as.data.frame(part.freq)
part=data.frame("hour"=DF_checkin_weather$hour, "cate_l1"=DF_checkin_weather$cate_l1, "isweekend"=DF_checkin_weather$isweekend)
part2=reshape(part,timevar=c"hour",idvar=c("is_weekend","cate_l1"),direction="wide")
part2=reshape(part,timevar="hour",idvar=c("is_weekend","cate_l1"),direction="wide")
?reshape
part2=reshape(part,timevar="hour",idvar=c("cate_l1"),direction="wide")
View(part2)
part2=reshape(part,timevar="hour",idvar=c("isweekend"),direction="wide")
View(part2)
table(part2)
summary(part2)
part=data.frame("gid"=DF_checkin_weather$gid,"hour"=DF_checkin_weather$hour, "cate_l1"=DF_checkin_weather$cate_l1, "isweekend"=DF_checkin_weather$isweekend)
part2=reshape(part,timevar="hour",idvar="gid",direction="wide")
View(part2)
part2=reshape(part,timevar="hour",idvar=c("gid","cate_l1"),direction="wide")
View(part2)
View(part)
part2=reshape(part,timevar="hour",idvar=c("gid","cate_l1","is_weekend"),direction="wide")
part2=reshape(part,idvar=c("gid","cate_l1","is_weekend"),direction="wide")
part=part[1:100,]
part2=reshape(part,idvar=c("gid","cate_l1","is_weekend"),direction="wide")
part2=reshape(part,timevar="hour",idvar=c("gid","isweekend"),direction="wide")
View(part2)
?table
table(part2)
test <- data.table("index"=rep(letters[1:10],100),"var1"=rnorm(1000,0,1))
View(test)
inds <- unique(test$index)
test2[,(inds):=lapply(inds,function(x)index==x)]
test[,(inds):=lapply(inds,function(x)index==x)]
View(test)
part=data.frame("hour"=DF_checkin_weather$hour, "cate_l1"=DF_checkin_weather$cate_l1, "isweekend"=DF_checkin_weather$isweekend)
inds <- unique(part$hour)
part[,(inds):=lapply(inds,function(x)index==x)]
part=data.table("hour"=DF_checkin_weather$hour, "cate_l1"=DF_checkin_weather$cate_l1, "isweekend"=DF_checkin_weather$isweekend)
part[,(inds):=lapply(inds,function(x)index==x)]
inds <- unique(part$hour)
part[,(inds):=lapply(inds,function(x)index==x)]
part[,(inds):=lapply(inds,function(x)hour==x)]
test <- data.table("hour"=DF_checkin_weather$hour, "cate_l1"=DF_checkin_weather$cate_l1, "isweekend"=DF_checkin_weather$isweekend)
inds <- unique(test$hour)
test[,(inds):=lapply(inds,function(x)hour==x)]
test <- data.table("index"=rep(letters[1:10],100),"var1"=rnorm(1000,0,1))
inds <- unique(test$index)
test <- data.table("hour"=as.character(DF_checkin_weather$hour), "cate_l1"=DF_checkin_weather$cate_l1, "isweekend"=DF_checkin_weather$isweekend)
inds <- unique(test$hour)
test[,(inds):=lapply(inds,function(x)hour==x)]
View(test)
test$hour=NULL
View(test)
table(test)
table(part)
freq=as.data.frame(table(part))
View(freq)
glm.model = glm(Freq ~   hour*cate_l1*isweekend, data=freq, family=poisson)
?glm.fit
?glm
summary(glm.model)
glm.model = glm(Freq ~   hour+cate_l1+isweekend, data=freq, family=poisson)
summary(glm.model)
anova(glm.model)
summary(freq)
View(freq)
freq=table(part)
summary(freq)
freq.df = as.data.frame(freq)
View(freq.df)
library(MASS)
loglm(~ hour + isweekend + cate_l1, data= Titanic)
library(MASS)
loglm(~ hour + isweekend + cate_l1, data= DF_checkin_weather)
library(MASS)
loglm(~ hour + isweekend + cate_l1, data= freq)
library(MASS)
loglm(~ hour + isweekend, data= freq)
log.model = loglm(~ hour + isweekend, data= freq)
summary(log.model)
log.model
log.model = loglm(~ hour * isweekend, data= freq)
log.model
log.model$observed
log.model$param
log.model = loglm(~ hour * isweekend, data= table(data.frame("hour"=DF_checkin_weather$hour,"isweekend"=DF_checkin_weather$isweekend)))
log.model
log.model$param
log.model
anova(log.model,test="Chisq")
log.model = loglm(~ hour + isweekend, data= table(data.frame("hour"=DF_checkin_weather$hour,"isweekend"=DF_checkin_weather$isweekend)))
log.model
log.model = loglm(~ hour + fog, data= table(data.frame("hour"=DF_checkin_weather$hour,"fog"=DF_checkin_weather$fog)))
log.model
log.model = loglm(~ hour + fog, data= table(data.frame("hour"=DF_checkin_weather$hour,"fog"=DF_checkin_weather$rain)))
log.model
log.model = loglm(~ hour + fog, data= table(data.frame("hour"=DF_checkin_weather$fog,"fog"=DF_checkin_weather$rain)))
log.model
log.model = loglm(~ hour + fog, data= table(data.frame("hour"=DF_checkin_weather$isweekend,"fog"=DF_checkin_weather$rain)))
log.model
log.model = loglm(~ hour + fog, data= table(data.frame("hour"=DF_checkin_weather$isweekend,"fog"=DF_checkin_weather$conds)))
log.model
anova(log.model)
glm.model = glm(Freq ~ var1 * var2, data=as.data.frame(table(data.frame("var1"=DF_checkin_weather$isweekend,"var2"=DF_checkin_weather$conds))), family=poisson)
anova(glm.model)
glm.model = glm(Freq ~ var1 + var2, data=as.data.frame(table(data.frame("var1"=DF_checkin_weather$isweekend,"var2"=DF_checkin_weather$conds))), family=poisson)
anova(glm.model)
summary(glm.model)
glm.model = glm(Freq ~ var1 + var2, data=as.data.frame(table(data.frame("var1"=DF_checkin_weather$hour,"var2"=DF_checkin_weather$conds))), family=poisson)
anova(glm.model)
glm.model = glm(Freq ~ var1 * var2, data=as.data.frame(table(data.frame("var1"=DF_checkin_weather$hour,"var2"=DF_checkin_weather$conds))), family=poisson)
anova(glm.model)
xtabs(cate_l1~hour, data=DF_checkin_weather)
?xtabs
xtabs(~cate_l1+hour, data=DF_checkin_weather)
library(ggplot2)
plot=ggplot(as.data.frame(xtabs(~cate_l1+hour, data=DF_checkin_weather)))
plot+geom_bar(stat="identity")
stats = as.data.frame(xtabs(~cate_l1+hour, data=DF_checkin_weather))
View(stats)
plot=ggplot(stats, aes(x=hour, y=Freq, col=cate_l1))
plot+geom_bar(stat="identity")
plot+geom_bar(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)
plot=ggplot(stats, aes(x=hour, y=Freq))
plot+geom_bar(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)
?xtabs
plot+geom_bar(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)+scale_y_continuous(labels  = percent)
library(scales)
plot+geom_bar(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)+scale_y_continuous(labels  = percent)
?geom_bar
plot=ggplot()
plot=ggplot(stats, aes(x=hour, col=cate_l1))
plot+geom_bar(stat="identity", aes(y=Freq/sum(Freq)))+facet_wrap(~cate_l1, ncol=5, nrow=2)
?xtabs
plot+hist(stat="identity", aes(y=Freq/sum(Freq)))+facet_wrap(~cate_l1, ncol=5, nrow=2)
plot=ggplot(stats, aes(x=hour, y=Freq))
plot+hist(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)
?hist
stats1 = xtabs(~cate_l1+hour, data=DF_checkin_weather)
View(stats)
sum(stats[,1:24])
stats[,1:24]
rowsum(stats)
rowsum(stats1)
rowSums(stats1)
plot=ggplot(stats, aes(x=hour, y=Freq))
rowsums = rowSums(stats1)
rowsums
stats
names(rowsums)
merge(stats, rowsums, by.x="cate_l1", by.y=names(y),all=TRUE)
merge(stats, rowsums, by.x="cate_l1",all=TRUE)
merge(stats, rowsums, by.x="cate_l1", by.y=names,all=TRUE)
rowsums = data.frame("name"=name(rowsums),"sum"=rowsums)
rowsums = data.frame("name"=names(rowsums),"sum"=rowsums)
View(rowsums)
merge(stats, rowsums, by.x="cate_l1", by.y="name",all=TRUE)
stats2=merge(stats, rowsums, by.x="cate_l1", by.y="name",all=TRUE)
stats2$prop=stats2$Freq/stats2$sum
plot=ggplot(stats2, aes(x=hour, y=prop))
plot+hist(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)
plot+geom_bar(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)
plot+geom_bar(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)+ylim(c(0,0.6))
?ylim
plot+geom_bar(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)+coord_cartesian(ylim = c(0,0.5)) +
;
plot+geom_bar(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)+coord_cartesian(ylim = c(0,0.5))
plot+geom_bar(stat="identity")+facet_wrap(~cate_l1, ncol=5, nrow=2)+coord_cartesian(ylim = c(0,0.25))
table(data.frame(DF_checkin_weather$hour, DF_checkin_weather$cate_l1))
test=rowsums$sum
mean(test)
sd(test)
stats3=xtabs(~hour,data=DF_checkin_weather)
stats3=data.frame(stats3)
plot=ggplot(stats3, aes(x=hour,y=Freq))
plot+geom_bar(stat = "identity")
DF_weather$hour = as.factor(format(strptime( DF_weather$localtime,
format="%Y-%m-%d %H:%M"),"%H"))
test=strptime( DF_weather$localtime, format="%Y-%m-%d %H:%M")
test=strptime( DF_weather$localtime, format="%Y/%m/%d %H:%M")
DF_weather$hour = as.factor(format(strptime( DF_weather$localtime, format="%Y/%m/%d %H:%M"),"%H"))
stats1=xtabs(~hour+conds, data=DF_weather)
stats1
plot=ggplot(as.data.frame(stats1), aes(x=hour,y=Freq))
plot+geom_bar(stat="identity")+facet_wrap(~conds, ncol=7, nrow=2)
source("fun\\mathmatrixcal.R")
basedir = "D:\\Experiments\\R\\"
DF_checkin = read.csv( paste0(basedir, "data\\userA.csv"),
header=TRUE, sep=",", #nrows=100000,
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"factor", "numeric","numeric",
"numeric","character","factor",
"factor")
)
## load weather
DF_weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
DF_weather$fog=as.logical(DF_weather$fog)
DF_weather$rain=as.logical(DF_weather$rain)
DF_weather$snow=as.logical(DF_weather$snow)
DF_weather$thunder=as.logical(DF_weather$thunder)
DF_weather$tornado=as.logical(DF_weather$tornado)
DF_checkin$datetime = strptime( strtrim(DF_checkin$localtime,19),
format="%Y-%m-%d %H:%M:%S")
## join checkin data with weather data based on timestamps
DF_checkin_weather = joindfsbytime(DF_checkin, DF_weather)
#rm(DF_checkin, DF_weather)
## deal with time
DF_checkin_weather$hour = as.factor(format(DF_checkin_weather$datetime,"%H"))
DF_checkin_weather$yearday = format(DF_checkin_weather$datetime,"%j")
DF_checkin_weather$weekday = format(DF_checkin_weather$datetime,"%w")
DF_checkin_weather$isweekend = as.factor(ifelse(
( DF_checkin_weather$weekday>5 | DF_checkin_weather$weekday<1),
"Weekend", "Workday"))
## add record for last checkin
DF_checkin_weather = copylastcheckinrec(DF_checkin_weather)
library(scales)
library(ggplot2)
source("fun\\mathmatrixcal.R")
basedir = "D:\\Experiments\\R\\"
# load checkin
checkin = read.csv( paste0(basedir, "data\\userA.csv"),
header=TRUE, sep=",",
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"factor", "numeric","numeric",
"numeric","character","factor",
"factor")
)
## load weather
weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
weather$fog=as.logical(weather$fog)
weather$rain=as.logical(weather$rain)
weather$snow=as.logical(weather$snow)
weather$thunder=as.logical(weather$thunder)
weather$tornado=as.logical(weather$tornado)
checkin$datetime = strptime( strtrim(checkin$localtime,19),
format="%Y-%m-%d %H:%M:%S")
## join checkin data with weather data based on timestamps
checkin = joindfsbytime(checkin, weather)
#rm(DF_checkin, DF_weather)
## deal with time
checkin$hour = as.factor(format(checkin$datetime,"%H"))
checkin$yearday = format(checkin$datetime,"%j")
checkin$weekday = format(checkin$datetime,"%w")
checkin$isweekend = as.factor(ifelse(
( checkin$weekday>5 | checkin$weekday<1),
"Weekend", "Workday"))
## add record for last checkin
checkin = copylastcheckinrec(checkin)
################################################################################
# basic preparation for experiment: load libraries, functions, data, etc.
library(scales)
library(ggplot2)
source("fun\\mathmatrixcal.R")
basedir = "D:\\Experiments\\R\\"
# load checkin
checkin = read.csv( paste0(basedir, "data\\userA.csv"),
header=TRUE, sep=",",
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"factor", "numeric","numeric",
"numeric","character","factor",
"factor")
)
## load weather
weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
data(Titanic)
dimnames(Titanic)
rm(Titanic)
?dimnames
?margin.table
# basic preparation for experiment: load libraries, functions, data, etc.
library(scales)
library(ggplot2)
source("D:\\GitRepos\\work\\fun\\mathmatrixcal.R")
basedir = "D:\\Experiments\\R\\"
# load checkin
checkin = read.csv( paste0(basedir, "data\\userA.csv"),
header=TRUE, sep=",",
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"factor", "numeric","numeric",
"numeric","character","factor",
"factor")
)
## load weather
weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
weather$fog=as.logical(weather$fog)
weather$rain=as.logical(weather$rain)
weather$snow=as.logical(weather$snow)
weather$thunder=as.logical(weather$thunder)
weather$tornado=as.logical(weather$tornado)
checkin$datetime = strptime( strtrim(checkin$localtime,19),
format="%Y-%m-%d %H:%M:%S")
## join checkin data with weather data based on timestamps
checkin = joindfsbytime(checkin, weather)
#rm(DF_checkin, DF_weather)
## deal with time
checkin$hour = as.factor(format(checkin$datetime,"%H"))
checkin$yearday = format(checkin$datetime,"%j")
checkin$weekday = format(checkin$datetime,"%w")
checkin$isweekend = as.factor(ifelse(
( checkin$weekday>5 | checkin$weekday<1),
"Weekend", "Workday"))
## add record for last checkin
checkin = copylastcheckinrec(checkin)
summary(checkin)
checkin = checkin[complete.cases(checkin),]
checkin = checkin[complete.cases(checkin),]
?na.omit
na.omit(checkin)
checkin=na.omit(checkin)
# basic preparation for experiment: load libraries, functions, data, etc.
library(scales)
library(ggplot2)
source("D:\\GitRepos\\work\\fun\\mathmatrixcal.R")
basedir = "D:\\Experiments\\R\\"
# load checkin
checkin = read.csv( paste0(basedir, "data\\userA.csv"),
header=TRUE, sep=",",
na.strings = "none",
colClasses = c("numeric","numeric","factor",
"factor", "numeric","numeric",
"numeric","character","factor",
"factor")
)
## load weather
weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character",
"numeric","factor","numeric","numeric",
"numeric","numeric","numeric","numeric",
"numeric","numeric")
)
weather$fog=as.logical(weather$fog)
weather$rain=as.logical(weather$rain)
weather$snow=as.logical(weather$snow)
weather$thunder=as.logical(weather$thunder)
weather$tornado=as.logical(weather$tornado)
checkin$datetime = strptime( strtrim(checkin$localtime,19),format="%Y-%m-%d %H:%M:%S")
## join checkin data with weather data based on timestamps
checkin = joindfsbytime(checkin, weather)
#rm(DF_checkin, DF_weather)
## deal with time
checkin$hour = as.factor(format(checkin$datetime,"%H"))
checkin$yearday = format(checkin$datetime,"%j")
checkin$weekday = format(checkin$datetime,"%w")
checkin$isweekend = as.factor(ifelse(( checkin$weekday>5 | checkin$weekday<1),
"Weekend", "Workday"))
## add record for last checkin
checkin = copylastcheckinrec(checkin)
#checkin=na.omit(checkin)
summary(checkin)
checkin=na.omit(checkin)
str(checkin)
cate.hour = xtabs(~hour+cate_l1, data=checkin)
cate.hour
summary(cate.hour)
colSums(cate.hour)
rowSums(cate.hour)
rowSums(cate.hour)>0
cate.hour = xtabs(~hour+cate_l1, data=checkin)
cate.hour = cate.hour[rowSums(cate.hour)>0,colSums(cate.hour)>0]
cate.hour = as.table(cate.hour[rowSums(cate.hour)>0,colSums(cate.hour)>0])
cate.intered = xtabs(cate_l1~last_cate_l1+hour+is_weekend+conds, data=checkin)
cate.intered = xtabs(cate_l1~last_cate_l1+hour+isweekend+conds, data=checkin)
cate.intered = xtabs(~cate_l1+last_cate_l1+hour+isweekend+conds, data=checkin)
cate.cate = as.table(cate.cate[rowSums(cate.cate)>0,colSums(cate.cate)>0])
cate.intered = as.table(cate.intered[rowSums(cate.intered)>0,colSums(cate.intered)>0])
chisq.test(cate.cate, simulate.p.value = TRUE)
chisq.test(cate.intered, simulate.p.value = TRUE)
